<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "SIP_Servlets_Server_User_Guide.ent">
%BOOK_ENTITIES;
]>
<!-- chapter id nickname: sfss -->
<section id="sfss-Services_for_SIP_Servlets">
<title>Operating the Example Applications</title>

<note>
<title> Important Information  </title>
<para>
Before trying out the examples in this section, you must have installed, configured and have &SHORT_PLATFORM_NAME; for JBoss or &SHORT_PLATFORM_NAME; for Tomcat AS7 running on your system.
</para>

<para>
See the chapters below for detailed instructions.
</para>
<para>
 <xref linkend="getting-started-with-MSS-JBOSS-AS7"/> 
</para>
<para>
<xref linkend="getting-started-with-MSS-Tomcat-AS7"/> 
</para>
</note>


<section id="sfss-The_Location_Service">
<title>The Location Service</title>
<para>The &PLATFORM_NAME; Location Service contains a list of mappings of
request URIs to destination addresses. When the Location Service receives
a request, it performs a lookup on that mapping and proxies the request
simultaneously to the destination address (or addresses) associated with
that URI.</para>
<note id="sfss-The_Location_Service_Mappings_Cannot_Currently_Be_Configured">
<title>The Location Service Mappings Cannot Currently Be Configured</title>
<para>The Location Service currently performs a lookup on a hard-coded
list of addresses. This model is evolving toward the eventual use of a
database.</para>
</note>
<para>Regardless of whether you are using the JBoss Application Server or
the Tomcat Servlet Container as the Servlets Server, the application,
container and Location Service perform the following steps:</para>
<itemizedlist>
<listitem>
<para>A user—let us call her Alice—makes a call to
<literal>sip:receiver@sip-servlets.com</literal>. The
<literal>INVITE</literal> is received by the servlet container, which
then starts the Location Service.</para>
</listitem>
<listitem>
<para>The Location Service, using non-SIP means, determines that the
callee (i.e. the receiver) is registered at two locations, identified
by the two SIP URIs, <literal>sip:receiver@127.0.0.1:5090</literal>
and <literal>sip:receiver@127.0.0.1:6090</literal>.</para>
</listitem>
<listitem>
<para>The Location Service proxies to those two destinations in
parallel, without record-routing, and without making use of supervised
mode.</para>
</listitem>
<listitem>
<para>One of the destinations returns a <literal>200 OK</literal>
status code; the second proxy is then canceled.</para>
</listitem>
<listitem>
<para>The <literal>200 OK</literal> is forwarded to Alice, and call
setup is completed as usual.</para>
</listitem>
</itemizedlist>
<para>Here is the current list of hard-coded contacts and their location
URIs:</para>
<itemizedlist>
<title>sip:receiver@sip-servlets.com</title>
<listitem>
<para><literal>sip:receiver@127.0.0.1:5090</literal></para>
</listitem>
<listitem>
<para><literal>sip:receiver@127.0.0.1:6090</literal></para>
</listitem>
</itemizedlist>
<!-- The Location Service --> <section id="sfss-binary-Location_Service--Installing_Configuring_and_Running">


<!--
<title>The Location Service: Installing, Configuring and Running</title>
<para>&#160;</para>

<formalpara id="sfss-binary-Location_Service-Pre-Install_Requirements_and_Prerequisites">
<title>Pre-Install Requirements and Prerequisites</title>
<para>The following requirements must be met before installation can begin.</para>
</formalpara>
-->
<!-- 
<variablelist
id="sfss-binary-Location_Service-Hardware_Requirements">
<title>Hardware Requirements</title>
<varlistentry>
<term>Sufficient Disk Space</term>
<listitem>
<para>&nbsp;</para>
</listitem>
</varlistentry>
</variablelist> 


<variablelist id="sfss-binary-Location_Service-Software_Prerequisites">
<title>Software Prerequisites</title>
<varlistentry>
<term>Either an &SHORT_PLATFORM_NAME; for JBoss or an &SHORT_PLATFORM_NAME; for Tomcat Installation</term>
<listitem>
<para>The Location Service requires either an &SHORT_PLATFORM_NAME; for JBoss or an
&SHORT_PLATFORM_NAME; for Tomcat binary installation.</para>
<para>You can find detailed instructions on installing &SHORT_PLATFORM_NAME; for
JBoss here: <xref linkend="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Installing_Configuring_and_Running"/>.</para>
<para>You can find detailed instructions on installing &SHORT_PLATFORM_NAME; for
Tomcat here: <xref linkend="bssswticar-SIP_Servlets_Server_with_Tomcat-Installing_Configuring_and_Running"/>.</para>
</listitem>
</varlistentry>
</variablelist>

--> 

<formalpara id="sfss-binary-Location_Service-Downloading">
<title>Downloading</title>
<para>The Location Service is comprised of two archive files, a Web
Archive (WAR) and a Default Application Router (DAR) configuration
file, which you need to add to your installed SIP Servlets Server. For
more information about WAR files, refer to the <ulink url="http://www.jboss.org/file-access/default/members/jbossas/freezone/docs/Server_Configuration_Guide/beta422/html/index.html">JBoss Application Server Administration and Development Guide</ulink>. For
more information about DAR files, refer to the <ulink url="http://jcp.org/en/jsr/detail?id=289">JSR 289 spec, Appendix C</ulink>.</para>
</formalpara>
<para>Download the Location Service&apos;s WAR file from here: <ulink url="https://oss.sonatype.org/content/groups/public/org/mobicents/servlet/sip/examples/location-service/&VERSION;/location-service-&VERSION;.war"/>.</para>
<para>Download the Location Service&apos;s DAR file from here: <ulink url="https://sipservlets.googlecode.com/git/sip-servlets-examples/location-service/locationservice-dar.properties"/>.</para>
<formalpara id="sfss-binary-Location_Service-Installing">


<title>Installing</title>
<para>Both the <filename>location-service-&VERSION;.war</filename> WAR file
and the <filename>locationservice-dar.properties</filename> DAR file
that you downloaded should be placed into different directories in
your SIP Servlet Server installation hierarchy. Which directory
depends on whether you are using the Location Service with &SHORT_PLATFORM_NAME; for
JBoss or with &SHORT_PLATFORM_NAME; for Tomcat:</para>
</formalpara>
<variablelist>
<varlistentry>

<term>&SHORT_PLATFORM_NAME; for JBoss AS7</term>
<listitem>
<para>Place <filename>location-service-&VERSION;.war</filename> into the
<filename><envar>$JBOSS_HOME</envar>/standalone/deployments/</filename>
directory, and <filename>locationservice-dar.properties</filename>
into the
<filename><envar>$JBOSS_HOME</envar>/standalone/configuration/dars/
</filename>
directory.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>&SHORT_PLATFORM_NAME; for Tomcat AS7</term>
<listitem>
<para>Place <filename>location-service-&VERSION;.war</filename> into the
<filename><envar>$CATALINA_HOME</envar>/webapps/</filename>
directory, and <filename>locationservice-dar.properties</filename>
into the
<filename><envar>$CATALINA_HOME</envar>/conf/dars/</filename>
directory.</para>
</listitem>
</varlistentry>
</variablelist>
<formalpara id="sfss-binary-Location_Service-Configuring">
<title>Configuration</title>

<!--
<para>The <literal>darConfigurationFileLocation</literal> attribute of
the <literal>Service</literal> element must be set to the value
<userinput>conf/dars/locationservice-dar.properties</userinput>. The
instructions are given below by SIP Servlets Server type:</para>
-->
</formalpara>

<variablelist>
<varlistentry>

<term>&SHORT_PLATFORM_NAME; for JBoss</term>
<listitem>

<!--
<para>Open the
<filename><envar>JBOSS_HOME</envar>/standalone/deployments/jboss-web.deployer/server.xml</filename>
configuration file and find the <literal>Service</literal>
element. Add an attribute to it called
<userinput>darConfigurationFileLocation</userinput>, and set it to
<replaceable>conf/dars/locationservice-dar.properties</replaceable>:</para>
 
-->
<example id="sfss-Editing_SS_for_JBoss_server.xml_for_the_Location_Service">
<title>Editing &SHORT_PLATFORM_NAME; for JBoss&apos;s standalone-sip.xml for the Location Service</title>

<!--
<programlisting role="XML">&lt;Service
name=&quot;jboss.web&quot;
className=&quot;org.mobicents.servlet.sip.startup.SipStandardService&quot;
sipApplicationDispatcherClassName=&quot;org.mobicents.servlet.sip.core.SipApplicationDispatcherImpl&quot;
darConfigurationFileLocation=&quot;conf/dars/locationservice-dar.properties&quot;
sipStackPropertiesFile=&quot;conf/mss-sip-stack.properties&quot;&gt;</programlisting>

-->

</example>

<screen>
In the $JBOSS_HOME/standalone/configuration/standalone-sip.xml file search for the line 

 &lt;subsystem xmlns="urn:org.mobicents:sip-servlets-as7:1.0" 
application-router="dars/mobicents-dar.properties" 

and replace it with the line below

 &lt;subsystem xmlns="urn:org.mobicents:sip-servlets-as7:1.0"
 application-router="dars/locationservice-dar.properties" 
</screen>
<!--
<para>Make sure that the configuration file only contains one
<literal>darConfigurationFileLocation</literal> attribute: your
new one.</para>

-->

</listitem>
</varlistentry>
<varlistentry>
<term>&SHORT_PLATFORM_NAME; for Tomcat</term>
<listitem>
<para>Open the
<filename><envar>$CATALINA_HOME</envar>/conf/server.xml</filename>
configuration file and find the <literal>Service</literal>
element. Add an attribute to it called
<userinput>darConfigurationFileLocation</userinput>, and set it to
<userinput>conf/dars/locationservice-dar.properties</userinput>:</para>
<example id="sfss-Editing_MSS_for_Tomcats_server.xml_for_the_Location_Service">
<title>Editing &SHORT_PLATFORM_NAME; for Tomcat&apos;s server.xml for the Location Service</title>
<programlisting role="XML">&lt;Service
name=&quot;Sip-Servlets&quot;
className=&quot;org.mobicents.servlet.sip.startup.SipStandardService&quot;
sipApplicationDispatcherClassName=&quot;org.mobicents.servlet.sip.core.SipApplicationDispatcherImpl&quot;
darConfigurationFileLocation=&quot;conf/dars/locationservice-dar.properties&quot;
sipStackPropertiesFile=&quot;conf/mss-sip-stack.properties&quot;&gt;</programlisting>
</example>
<para>Make sure that the configuration file only contains one
<literal>darConfigurationFileLocation</literal> attribute: your
new one.</para>
</listitem>
</varlistentry>
</variablelist>
<formalpara id="sfss-binary-Location_Service-Running">
<title>Running</title>
<para>Once the WAR and DAR files have been placed in the right
directories, and the JBoss Application Server or Tomcat Servlet
Container knows where to find them (which you specified in the <filename>standalone-sip.xml</filename> and
<filename>server.xml</filename> file), then you should go ahead and
run the SIP Servlets Server.</para>
</formalpara>
<!--
<para>To learn how to run the SIP Servlets-enabled JBoss Application
Server, refer to <xref linkend="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Running"/>.</para>
<para>To learn how to run the SIP Servlets-enabled Tomcat Container,
refer to <xref linkend="bssswticar-binary-SIP_Servlets_Server_with_Tomcat-Running"/>.</para>
-->

<formalpara id="sfss-binary-Location_Service-Testing">
<title>Testing</title>
<para>The following procedure shows how to test the Location
Service.</para>
</formalpara>
<procedure>
<title/>
<step>
<para>Start two SIP soft-phones. The first phone should be set up as
<userinput>sip:receiver@sip-servlets.com</userinput> at the IP address
<userinput>127.0.0.1</userinput> on port
<userinput>5090</userinput>. The second phone can be set up in any
way you like. Note that the SIP phones do not have to be
registered.</para>
</step>
<step>
<para>Using the second phone, make a call to
<literal>sip:receiver@sip-servlets.com</literal>. If the Location
Service has been set up correctly and is running, the first phone—as
the receiver or callee—should now be ringing.</para>
</step>
</procedure>
<!--<formalpara
id="sfss-binary-Location_Service-Using">
<title>Using</title>
<para>&nbsp;</para>
</formalpara>

 <formalpara id="sfss-binary-Location_Service-Stopping">
<title>Stopping</title>
<para>To learn how to stop the SIP Servlets-enabled JBoss Application
Server, refer to <xref linkend="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Stopping"/>.</para>
</formalpara>
<para>To learn how to stop the SIP Servlets-enabled Tomcat Container,
refer to <xref linkend="bssswticar-binary-SIP_Servlets_Server_with_Tomcat-Stopping"/>.</para>
<formalpara id="sfss-binary-Location_Service-Uninstalling">
<title>Uninstalling</title>
<para>Unless disk space is at a premium, there is usually no need to
uninstall the Location Service. However, if you will not be using it
again, you may want to unset or reset the
<literal>darConfigurationFileLocation</literal> attribute of the
<literal>Service</literal> element, which you set in the
<filename>server.xml</filename> configuration file in <xref linkend="sfss-binary-Location_Service-Configuring"/>.</para>
</formalpara>
<para>You may also wish to delete the WAR and DAR files for the Location
Service, which you installed in <xref linkend="sfss-binary-Location_Service-Installing"/>.</para>

-->
</section>
</section>
<section id="sfss-The_Diameter_Event-Changing_Service">
<title>The Diameter Event-Changing Service</title>
<para>The Diameter Event-Changing Service is based on the Location
Service, which performs call-charging at a fixed rate. Upon the initiation
of a call, a debit of €10.00 occurs. In the cases of a call being rejected
or the caller disconnecting (hanging up) before an answer is received, the
caller&apos;s account is refunded.</para>
<para>Note that an &SHORT_PLATFORM_NAME; for JBoss installation is required to run this
example; it will not work with &SHORT_PLATFORM_NAME; for Tomcat.</para>
<para>Provided here is a step-by-step description of the procedure as
performed by the application and container:</para>
<procedure id="sfss-Diameter_Event-Changing_Service_Step-By-Step">
<title>Diameter Event-Changing Service Step-By-Step</title>
<step>
<!--* Alice makes a call to sip:receiver@sip-servlets.com. The INVITE is received by the servlet container which sends the debit request to the Charging Server and invokes the location service--> <para>A user, Alice, makes a call to
<literal>sip:receiver@sip-servlets.com</literal>. The
<literal>INVITE</literal> is received by the servlet container, which
sends a request to debit Alice&apos;s account to the Charging Server. The
servlet container then invokes the location service.</para>
</step>
<step>
<!--* The location service determines, using non-SIP means, where the callee (receiver) is registered with two locations, identified by, say, two SIP URIs (sip:receiver@127.0.0.1:5090 and sip:receiver@127.0.0.1:6090).--> <para>The Location Service determines, without using the SIP protocol
itself, where the callee—or receiver—is registered. The callee may be
registered at two locations identified by two SIP URIs:
<literal>sip:receiver@127.0.0.1:5090</literal> and
<literal>sip:receiver@127.0.0.1:6090</literal>.</para>
</step>
<step>
<!--* The service proxies to those two destinations in parallel, without record-routing, and without the supervised mode.--> <para>The Location Service proxies to those two destinations
simultaneously, without record-routing and without using the supervised
mode.</para>
</step>
<step>
<!--* Once one of the destinations return 200 (OK), the other branch is cancelled by the container.--> <para>One of the destinations returns <literal>200 (OK)</literal>, and
so the container cancels the other.</para>
</step>
<step>
<!--* The 200 is forwarded upstream to Alice and the call setup is completed as per usual.--> <para>The <literal>200 (OK)</literal> is forwarded upstream to Alice,
and the call setup is carried out as usual.</para>
</step>
<step>
<!--* If none of the destinations accepts the call, a Diameter Accounting-Request for refund is sent to the Diameter Charging Server in order to credit the 10.0 euros debited.--> <para>If none of the registered destinations accepts the
call, a Diameter Accounting-Request for refund is sent to the Diameter
Charging Server in order to debit the already-credited €10.00</para>
</step>
</procedure>
<!-- Diameter Event-Changing Service --> <section id="sfss-binary-Diameter_Event-Changing_Service--Installing_Configuring_and_Running">
<title>Diameter Event-Changing Service: Installing, Configuring and Running</title>
<para>Preparing your &SHORT_PLATFORM_NAME; for JBoss server to run the Diameter
Event-Changing example requires downloading a WAR archive, a DAR
archive, the Ericsson Charging Emulator, setting an attribute in JBoss&apos;s
<filename>standalone-sip.xml</filename> configuration file, and then running
JBoss AS. Detailed instructions in the section below.</para>
<formalpara id="sfss-binary-Diameter_Event-Changing_Service-Pre-Install_Requirements_and_Prerequisites">
<title>Pre-Install Requirements and Prerequisites</title>
<para>The following requirements must be met before installation can begin.</para>
</formalpara>
<!-- <variablelist
id="sfss-binary-Diameter_Event-Changing_Service-Hardware_Requirements">
<title>Hardware Requirements</title>
<varlistentry>
<term>Sufficient Disk Space</term>
<listitem>
<para>&nbsp;</para>
</listitem>
</varlistentry>
</variablelist> --> <variablelist id="sfss-binary-Diameter_Event-Changing_Service-Software_Prerequisites">
<title>Software Prerequisites</title>
<varlistentry>
<term>One &SHORT_PLATFORM_NAME; for JBoss Installation</term>
<listitem>
<para>Before proceeding, you should follow the instructions for
installing, configuring, running and testing &SHORT_PLATFORM_NAME; for JBoss from
the binary distribution.</para>
</listitem>
</varlistentry>
</variablelist>
<formalpara id="sfss-binary-Diameter_Event-Changing_Service-Downloading">
<title>Downloading</title>
<para>The following procedure describes how to download the required files.</para>
</formalpara>
<procedure>
<step>
<para>First, download the latest Web Application Archive
(<acronym>WAR</acronym>) file corresponding to this example, the
current version of which is named
<filename>diameter-event-charging-*.war</filename>, from <ulink url="https://oss.sonatype.org/content/groups/public/org/mobicents/servlet/sip/examples/diameter-event-charging/&VERSION;/diameter-event-charging-&VERSION;.war"/>.</para>
</step>
<step>
<para>Secondly, download the corresponding Disk Archive
(<acronym>DAR</acronym>) configuration file here:
<ulink url="https://sipservlets.googlecode.com/git/sip-servlets-examples/diameter-event-charging/diametereventcharging-dar.properties"/>.</para>
</step>
<step>
<para>Finally, you will need to download the Ericsson Charging
Emulator, version 1.0, from <ulink url="http://mobicents.googlecode.com/files/ChargingSDK-1_0_D31E.zip"/>.</para>
</step>
</procedure>


<formalpara id="sfss-binary-Diameter_Event-Changing_Service-Installing">
<title>Installing</title>
<para>The following procedure describes how to install the downloaded files.</para>
</formalpara>
<procedure>
<step>
<para>Place the <filename>diameter-event-charging-&VERSION;.war</filename>
WAR archive into the
<filename>$JBOSS_HOME/standalone/deployments/</filename>
directory.</para>
</step>
<step>
<para>Place the
<filename>diametereventcharging-dar.properties</filename> DAR file
in your
$JBOSS_HOME/standalone/configuration/dars/ 
directory.</para>
</step>
<step>
<para>Finally, open the terminal, move into the directory to which
you downloaded the Ericsson Charging SDK (for the sake of this
example, we will call this directory
<filename>charging_sdk</filename>), and then unzip the downloaded
zip file (you can use Java&apos;s <command>jar <option>-xvf</option></command> command for this:</para>
<screen>~]$ cd charging_sdk
charging_sdk]$ jar -xvf ChargingSDK-1_0_D31E.zip</screen>
<para>Alternatively, you can use Linux&apos;s <command>unzip</command>
command to do the dirty work:</para>
<screen>charging_sdk]$ unzip ChargingSDK-1_0_D31E.zip</screen>
</step>
</procedure>
<formalpara id="sfss-binary-Diameter_Event-Changing_Service-Configuring">
<title>Configuration</title>


<!--
<para>To configure the server for the Event-Changing example, simply
open the <filename>server.xml</filename> configuration file in your
server&apos;s
<filename><envar>$JBOSS_HOME</envar>/server/&lt;profile&gt;/deploy/jboss-web.deployer/</filename>
directory, and edit the value of the
<literal>darConfigurationFileLocation</literal> attribute of the
<literal>Service</literal> element so that it is
<literal>conf/dars/mobicents-dar.properties</literal>.</para>
-->
</formalpara>


<variablelist>
<varlistentry>

<term>&SHORT_PLATFORM_NAME; for JBoss</term>
<listitem>


<example id="sfss-Editing_the_darConfigurationFileLocation_Attribute_of_the_Service_Tag">
<title>Editing the standalone-sip.xml for the Diameter Event-Changer Service</title>

</example>

<screen>
In the $JBOSS_HOME/standalone/configuration/standalone-sip.xml
make sure the application router is pointing the mobicents-dar.properties file as follows. 

 &lt;subsystem xmlns="urn:org.mobicents:sip-servlets-as7:1.0" 
application-router="dars/mobicents-dar.properties" 

 
</screen>


</listitem>
</varlistentry>
</variablelist>







<!--
&lt;Service name=&quot;jboss.web&quot;
className=&quot;org.mobicents.servlet.sip.startup.SipStandardService&quot;
sipApplicationDispatcherClassName=&quot;org.mobicents.servlet.sip.core.SipApplicationDispatcherImpl&quot;
sipApplicationRouterClassName=&quot;org.mobicents.servlet.sip.router.DefaultApplicationRouter&quot;
darConfigurationFileLocation=&quot;conf/dars/mobicents-dar.properties&quot;
sipStackPropertiesFile=&quot;conf/mss-sip-stack.properties&quot;&gt;

...
-->



<!--<para>Your server is now set up to run the Event-Changing example.</para>--> <formalpara id="sfss-binary-Diameter_Event-Changing_Service-Running">
<title>Running</title>
<para>The following procedure describes how to run the Diameter Event-Changing Service.</para>
</formalpara>
<procedure id="sfss-Diameter_Event-Changing_Service">
<title>Diameter Event-Changing Service</title>
<!--
<step>
<para>First, you should run your &SHORT_PLATFORM_NAME; for JBoss server. For
instructions on doing so, refer to <xref linkend="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Running"/>.</para>
</step>

-->

<step>
<para>Then, run the Ericsson Charging Emulator. Open a terminal,
change the working directory to the location of the unzipped
Charging Emulator files (in
<filename>ChargingSDK-1_0_D31E</filename> or a similarly-named
directory), and run it with the <command>java -jar <filename>PPSDiamEmul.jar</filename></command> command:</para>
<screen>~]$ java -jar PPSDiamEmul.jar</screen>
</step>
</procedure>
<formalpara id="sfss-binary-Diameter_Event-Changing_Service-Using">
<title>Using</title>
<para>Using the Event-Changing service means, firstly, inserting some
parameters into the Charging Emulator, and then, by using two SIP
(soft)phones, calling one with the other. The following sequential
instructions show you how.</para>
</formalpara>
<note id="sfss-SIP_SoftPhone_Which">
<title>SIP (Soft)Phone? Which?</title>
<para>The &PLATFORM_NAME; team recommends one of the following SIP phones,
and has found that they work well: the 3CX Phone, the SJ Phone or the
WengoPhone.</para>
</note>
<procedure id="sfss-Using_the_Diameter_Event-Changing_Service">
<title>Using the Diameter Event-Changing Service</title>
<step>
<title>Configure the Ericsson SDK Charging Emulator</title>
<para>Once you have started the Charging Emulator, you should
configure it exactly as portrayed in <xref linkend="figure-mss-ChargingEmulatorConfig"/>.</para>
<figure id="figure-mss-ChargingEmulatorConfig">
<title>Configuring the Charging Emulator</title>
<mediaobject id="sfss-mss-DiameterEventChanging-ss-ChargingEmulatorConfig">
<imageobject>
<imagedata width="440" align="center" fileref="images/mss-DiameterEventChanging-ss-ChargingEmulatorConfig.png" format="PNG"/>
</imageobject>
</mediaobject>
</figure>
<orderedlist>
<listitem>
<para>Set the <literal>Peer ID</literal> to:
<userinput>aaa://127.0.0.1:21812</userinput></para>
</listitem>
<listitem>
<para>Set the <literal>Realm</literal> to:
<userinput>mobicents.org</userinput></para>
</listitem>
<listitem>
<para>Set the <literal>Host IP</literal> to:
<userinput>127.0.0.1</userinput></para>
</listitem>
</orderedlist>
</step>
<step>
<para>Start two SIP (soft)phones. You should set the first phone up
with the following parameters:
<userinput>sip:receiver@sip-servlets</userinput> on IP address
<userinput>127.0.0.1</userinput> on port
<userinput>5090</userinput>. The other phone can be set up any way
you like.</para>
</step>
<step>
<para>Before making a call, open the <menuchoice>
<guimenu>Config</guimenu>
<guimenuitem>Options</guimenuitem>
</menuchoice> dialog window, as shown in the image.</para>
<figure>
<title>Configuring Accounts in the Charging Emulator</title>
<mediaobject id="sfss-mss-DiameterEventChanging-ss-ChargingAccountConfig">
<imageobject>
<imagedata width="440" align="center" fileref="images/mss-DiameterEventChanging-ss-ChargingAccountConfig.png" format="PNG"/>
</imageobject>
</mediaobject>
</figure>
<!--<para>You can see the user balance in the emulator: in the menu Config > Account > Click on "00001000-Klas Svensson" and watch the balance. Stretch the window down to see the history.</para>--> <para>In the <guilabel>Account Configuration</guilabel> window of
the Charging Emulator, you can see the user&apos;s balances. Select a
user to watch the balance. You can also stretch the window
lengthwise to view the user&apos;s transaction history.</para>
</step>
<step>
<para>Time to call! From the second,
<quote>any-configuration</quote> phone, make a call to
<literal>sip:receiver@sip-servlets.com</literal>. Upon doing so, the
other phone should ring or signal that it is being contacted
.</para>
</step>
<step>
<!--<para>You should see there is one first request, right after the invite and before the other party accept/reject the call, sent to the Charging Emulator, that's when the debit is made. In case the call is rejected, or the caller gives up, there's a new Diameter Request sent which will be the refund of the unused value. In case the call is accepted, nothing else will happen, related to Diameter.</para>--> <para>You should be able to see a request—immediately following the
invite and before the other party (i.e. you) accepts or rejects the
call—sent to the Charging Emulator. That is when the debit of the
user&apos;s account is made. In the case that the call is rejected, or
the caller gives up, a second, new Diameter request is sent to
refund the initial amount charged by the call. On the other hand, if
the call is accepted, nothing else related to Diameter happens, and
no second request takes place.</para>
<para>Please note that this is not the correct way to do
charging, as Diameter provides other means, such as unit
reservation. However, for the purpose of a demonstration it is
sufficient to show the debit and follow-up credit working. Also,
this is a fixed-price call, regardless of the duration. Charging
can, of course, be configured so that it is time-based.</para>
</step>
</procedure>
<!--<formalpara
id="sfss-binary-Diameter_Event-Changing_Service-Stopping">
<title>Stopping</title>
<para>&nbsp;</para>
</formalpara>
<formalpara
id="sfss-binary-Diameter_Event-Changing_Service-Testing">
<title>Testing</title>
<para>&nbsp;</para>
</formalpara>
<formalpara
id="sfss-binary-Diameter_Event-Changing_Service-Uninstalling">
<title>Uninstalling</title>
<para>&nbsp;</para>
</formalpara>--> </section>
</section>


<section id="sfss-The_Call-Blocking_Service">
<title>The Call-Blocking Service</title>
<para>The &PLATFORM_NAME; Call-Blocking Service, upon receiving an
<literal>INVITE</literal> request, checks to see whether the sender&apos;s
address is a blocked contact. If so, it returns a
<literal>FORBIDDEN</literal> reply; otherwise, call setup proceeds as
normal.</para>
<note id="sfss-Blocked_Contacts_Cannot_Currently_Be_Configured">
<title>Blocked Contacts Cannot Currently Be Configured</title>
<para>Blocked contacts are currently hard-coded addresses. This model is
evolving towards the eventual use of a database.</para>
</note>
<para>Here is the current hard-coded list of blocked contacts:</para>
<itemizedlist>
<listitem>
<para><literal>sip:blocked-sender@sip-servlets.com</literal></para>
</listitem>
<listitem>
<para><literal>sip:blocked-sender@127.0.0.1</literal></para>
</listitem>
</itemizedlist>
<!-- The Call-Blocking Service --> <section id="sfss-binary-Call-Blocking_Service--Installing_Configuring_and_Running">
<title>The Call-Blocking Service: Installing, Configuring and Running</title>
<para>&#160;</para>
<!--
<formalpara id="sfss-binary-Call-Blocking_Service-Pre-Install_Requirements_and_Prerequisites">
<title>Pre-Install Requirements and Prerequisites</title>
<para>The following requirements must be met before installation can begin.</para>
</formalpara>
<variablelist
id="sfss-binary-Call-Blocking_Service-Hardware_Requirements">
<title>Hardware Requirements</title>
<varlistentry>
<term>Sufficient Disk Space</term>
<listitem>
<para>&nbsp;</para>
</listitem>
</varlistentry>
</variablelist> --> <variablelist id="sfss-binary-Call-Blocking_Service-Software_Prerequisites">
<title>Software Prerequisites</title>
<varlistentry>
<term>Either an &SHORT_PLATFORM_NAME; for JBoss or an &SHORT_PLATFORM_NAME; for Tomcat Installation</term>
<listitem>
<para>The Call-Blocking Service requires either an &SHORT_PLATFORM_NAME; for JBoss
or an &SHORT_PLATFORM_NAME; for Tomcat binary installation.</para>
<para>You can find detailed instructions on installing &SHORT_PLATFORM_NAME; for
JBoss here: <xref linkend="getting-started-with-MSS-JBOSS-AS7"/>.
</para>
<para>You can find detailed instructions on installing &SHORT_PLATFORM_NAME; for
Tomcat here: <xref linkend="bssswticar-SIP_Servlets_Server_with_Tomcat-Installing_Configuring_and_Running"/>.
</para>
</listitem>
</varlistentry>
</variablelist>


<formalpara id="sfss-binary-Call-Blocking_Service-Downloading">
<title>Downloading</title>


<para>The Call-Blocking Service is comprised of two archive files, a
Web Archive (WAR) and a Default Application Router (DAR) configuration
file, which you need to add to your installed SIP Servlets Server. For
more information about WAR files, refer to the <ulink url="http://www.jboss.org/file-access/default/members/jbossas/freezone/docs/Server_Configuration_Guide/beta422/html/index.html">JBoss Application Server Administration and Development Guide</ulink>. For
more information about DAR files, refer to the <ulink url="http://jcp.org/en/jsr/detail?id=289">JSR 289 spec, Appendix C</ulink>.</para>
</formalpara>

<para>Download the Call-Blocking Service&apos;s WAR file from here: <ulink url="https://oss.sonatype.org/content/groups/public/org/mobicents/servlet/sip/examples/call-blocking/&VERSION;/call-blocking-&VERSION;.war"/>.</para>
<para>Download the Call-Blocking Service&apos;s DAR file from here: <ulink url="https://sipservlets.googlecode.com/git/sip-servlets-examples/call-blocking/call-blocking-servlet-dar.properties"/>.</para>


<formalpara id="sfss-binary-Call-Blocking_Service-Installing">
<title>Installing</title>
<para>Both the <filename>call-blocking-&VERSION;.war</filename> WAR file and
the <filename>call-blocking-servlet-dar.properties</filename> DAR file
that you downloaded should be placed into different directories in
your SIP Servlet Server installation hierarchy. Which directory depends
on whether you are using the Call-Blocking Service with &SHORT_PLATFORM_NAME; for JBoss
or with &SHORT_PLATFORM_NAME; for Tomcat:</para>
</formalpara>
<variablelist>
<varlistentry>
<term>&SHORT_PLATFORM_NAME; for JBoss</term>
<listitem>
<para>Place <filename>call-blocking-&VERSION;.war</filename> into the
<filename><envar>$JBOSS_HOME</envar>/standalone/deployments/</filename>
directory, and
<filename>call-blocking-servlet-dar.properties</filename> into the
<filename><envar>$JBOSS_HOME</envar>/standalone/configuration/dars/</filename>
directory.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>&SHORT_PLATFORM_NAME; for Tomcat</term>
<listitem>
<para>Place
<filename>call-blocking-servlet-dar.properties</filename> into the
<filename><envar>$CATALINA_HOME</envar>/webapps/</filename>
directory, and
<filename>call-blocking-servlet-dar.properties</filename> into the
<filename><envar>$CATALINA_HOME</envar>/conf/dars/</filename>
directory.</para>
</listitem>
</varlistentry>
</variablelist>


<formalpara id="sfss-binary-Call-Blocking_Service-Configuring">
<title>Configuring</title>
</formalpara>

<variablelist>
<varlistentry>
<term>&SHORT_PLATFORM_NAME; for JBoss</term>
<listitem>


<example id="sfss-Editing_the_callBlockingService_Attribute_of_the_Service_Tag">
<title>Editing the standalone-sip.xml file for Call Blocking</title>

</example>

<screen>
In the $JBOSS_HOME/standalone/configuration/standalone-sip.xml search for the line below
 
 &lt;subsystem xmlns="urn:org.mobicents:sip-servlets-as7:1.0" 
 application-router="dars/mobicents-dar.properties"  

change it to the following

 &lt;subsystem xmlns="urn:org.mobicents:sip-servlets-as7:1.0" 
 application-router="dars/call-blocking-servlet-dar.properties" 

 </screen>
</listitem>
</varlistentry>
</variablelist>


<!--
<para>The <literal>darConfigurationFileLocation</literal> attribute of
the <literal>Service</literal> element must be set to the value
<userinput>conf/dars/call-blocking-servlet-dar.properties</userinput>.
The instructions for doing so are given below by SIP Servlets Server
type:</para>
-->



<variablelist>
<!--
<varlistentry>
<term>&SHORT_PLATFORM_NAME; for JBoss</term>
<listitem>
<para>Open the
<filename><envar>JBOSS_HOME</envar>/standalone/deployments/jboss-web.deployer/server.xml</filename>
configuration file and find the <literal>Service</literal>
element. Add an attribute to it called
<userinput>darConfigurationFileLocation</userinput>, and set it to
<replaceable>conf/dars/call-blocking-servlet-dar.properties</replaceable>:</para>
<example id="sfss-Editing_SS_for_JBoss_server.xml_for_the_Call-Blocking_Service">
<title>Editing &SHORT_PLATFORM_NAME; for JBoss&apos;s server.xml for the Call-Blocking Service</title>
<programlisting role="XML">&lt;Service
name=&quot;jboss.web&quot;
className=&quot;org.mobicents.servlet.sip.startup.SipStandardService&quot;
sipApplicationDispatcherClassName=&quot;org.mobicents.servlet.sip.core.SipApplicationDispatcherImpl&quot;
darConfigurationFileLocation=&quot;conf/dars/call-blocking-servlet-dar.properties&quot;
sipStackPropertiesFile=&quot;conf/mss-sip-stack.properties&quot;&gt;</programlisting>
</example>


<para>Make sure that the configuration file only contains one
<literal>darConfigurationFileLocation</literal> attribute: your
new one.</para>
</listitem>
</varlistentry>
-->


<varlistentry>
<term>&SHORT_PLATFORM_NAME; for Tomcat</term>
<listitem>
<para>Open the
<filename><envar>$CATALINA_HOME</envar>/conf/server.xml</filename>
configuration file and find the <literal>Service</literal>
element. Add an attribute to it called
<userinput>darConfigurationFileLocation</userinput>, and set it to
<userinput>conf/dars/call-blocking-servlet-dar.properties</userinput>:</para>
<example id="sfss-Editing_MSS_for_Tomcats_server.xml_for_the_Call-Blocking_Service">
<title>Editing &SHORT_PLATFORM_NAME; for Tomcat&apos;s server.xml for the Call-Blocking Service</title>
<programlisting role="XML">&lt;Service
name=&quot;Sip-Servlets&quot;
className=&quot;org.mobicents.servlet.sip.startup.SipStandardService&quot;
sipApplicationDispatcherClassName=&quot;org.mobicents.servlet.sip.core.SipApplicationDispatcherImpl&quot;
darConfigurationFileLocation=&quot;conf/dars/call-blocking-servlet-dar.properties&quot;
sipStackPropertiesFile=&quot;conf/mss-sip-stack.properties&quot;&gt;</programlisting>
</example>
<para>Make sure that the configuration file only contains one
<literal>darConfigurationFileLocation</literal> attribute: your
new one.</para>
</listitem>
</varlistentry>
</variablelist>



<formalpara id="sfss-binary-Call-Blocking_Service-Running">
<title>Running</title>
<para>Once the WAR and DAR files have been placed in the right
directories, and the JBoss Application Server or Tomcat Servlet
Container knows where to find them (which you specified in a
<filename>server.xml</filename> and the <filename>standalone-sip.xml</filename>  files), then you should go ahead and
run the SIP Servlets Server.</para>
</formalpara>
<!--
<para>To learn how to run the SIP Servlets-enabled JBoss Application
Server, refer to <xref linkend="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Running"/>.</para>
<para>To learn how to run the SIP Servlets-enabled Tomcat Container,
refer to <xref linkend="bssswticar-binary-SIP_Servlets_Server_with_Tomcat-Running"/>.</para>
-->

<formalpara id="sfss-binary-Call-Blocking_Service-Testing">
<title>Testing</title>
<para>The following procedure shows how to test the Call-Blocking
Service.</para>
</formalpara>
<procedure>
<title>Testing the Call Blocking Service</title>
<step>
<para>Start a SIP softphone of your choice. The account name should
be <userinput>blocked-sender</userinput>. The <literal>From Header</literal> should list one of the following addresses:
<userinput>sip:blocked-sender@sip-servlets.com</userinput> or
<userinput>sip:blocked-sender@127.0.0.1</userinput>. The SIP
softphone does not need to be registered.</para>
</step>
<step>
<para>Make a call to any address, and you should receive a
<literal>FORBIDDEN</literal> response.</para>
</step>
</procedure>
<!--<formalpara
id="sfss-binary-Call-Blocking_Service-Using">
<title>Using</title>
<para>&nbsp;</para>
</formalpara>

<formalpara id="sfss-binary-Call-Blocking_Service-Stopping">
<title>Stopping</title>
<para>To learn how to stop the SIP Servlets-enabled JBoss Application
Server, refer to <xref linkend="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Stopping"/>.</para>
</formalpara>
<para>To learn how to stop the SIP Servlets-enabled Tomcat Container,
refer to <xref linkend="bssswticar-binary-SIP_Servlets_Server_with_Tomcat-Stopping"/>.</para>
<formalpara id="sfss-binary-Call-Blocking_Service-Uninstalling">
<title>Uninstalling</title>
<para>Unless disk space is at a premium, there is usually no need to
uninstall the Call-Blocking Service. However, if you will not be using
it again, you may want to unset or reset the
<literal>darConfigurationFileLocation</literal> attribute of the
<literal>Service</literal> element, which you set in the
<filename>server.xml</filename> configuration file in <xref linkend="sfss-binary-Call-Blocking_Service-Configuring"/>.</para>
</formalpara>
<para>You may also wish to delete the WAR and DAR files for the
Call-Blocking Service, which you installed in <xref linkend="sfss-binary-Call-Blocking_Service-Installing"/>.</para>

-->

</section>
</section>
<section id="sfss-The_Call-Forwarding_Service">
<title>The Call-Forwarding Service</title>
<para>The &PLATFORM_NAME; Call-Forwarding Service, upon receiving an
<literal>INVITE</literal> request, checks to see whether the sender&apos;s
address is among those in a list of addresses which need to be forwarded.
If so, then the Call-Forwarding Service acts as a Back-to-Back User Agent
(B2BUA), and creates a new call leg to the destination. When the response
is received from the new call leg, it sends it an acknowledgment
(<literal>ACK</literal>) and then responds to the original caller. If, on
the other hand, the server does not receive an <literal>ACK</literal>,
then it tears down the new call leg with a <literal>BYE</literal>. Once
the <literal>BYE</literal> is received, then it answers
<literal>OK</literal> directly and sends the <literal>BYE</literal> to
the new call leg.</para>
<note id="sfss-Contacts_to_Forward_Cannot_Currently_Be_Configured">
<title>Contacts to Forward Cannot Currently Be Configured</title>
<para>Contacts to forward are currently hard-coded addresses. This model
is evolving toward the eventual use of a database.</para>
</note>
<para>Here is the current hard-coded list of contacts to forward:</para>
<itemizedlist>
<listitem>
<para><literal>sip:receiver@sip-servlets.com</literal></para>
</listitem>
<listitem>
<para><literal>sip:receiver@127.0.0.1</literal></para>
</listitem>
</itemizedlist>
<!-- The Call-Forwarding Service --> <section id="sfss-binary-Call-Forwarding_Service--Installing_Configuring_and_Running">
<title>The Call-Forwarding Service: Installing, Configuring and Running</title>
<para>&#160;</para>
<formalpara id="sfss-binary-Call-Forwarding_Service-Pre-Install_Requirements_and_Prerequisites">
<title>Pre-Install Requirements and Prerequisites</title>
<para>The following requirements must be met before installation can begin.</para>
</formalpara>
<!-- <variablelist
id="sfss-binary-Call-Forwarding_Service-Hardware_Requirements">
<title>Hardware Requirements</title>
<varlistentry>
<term>Sufficient Disk Space</term>
<listitem>
<para>&nbsp;</para>
</listitem>
</varlistentry>
</variablelist> 

<variablelist id="sfss-binary-Call-Forwarding_Service-Software_Prerequisites">
<title>Software Prerequisites</title>
<varlistentry>
<term>Either an &SHORT_PLATFORM_NAME; for JBoss or an &SHORT_PLATFORM_NAME; for Tomcat Installation</term>
<listitem>
<para>The Call-Forwarding Service requires either an &SHORT_PLATFORM_NAME; for JBoss
or an &SHORT_PLATFORM_NAME; for Tomcat binary installation.</para>
<para>You can find detailed instructions on installing &SHORT_PLATFORM_NAME; for
JBoss here: <xref linkend="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Installing_Configuring_and_Running"/>.</para>
<para>You can find detailed instructions on installing &SHORT_PLATFORM_NAME; for
Tomcat here: <xref linkend="bssswticar-SIP_Servlets_Server_with_Tomcat-Installing_Configuring_and_Running"/>.</para>
</listitem>
</varlistentry>
</variablelist>
-->

<formalpara id="sfss-binary-Call-Forwarding_Service-Downloading">
<title>Downloading</title>
<para>The Call-Forwarding Service is comprised of two archive files, a
Web Archive (WAR) and a Data Archive (DAR), which you need to add to
your installed SIP Servlets Server. For more information about WAR and
DAR files, refer to the <ulink url="http://www.jboss.org/file-access/default/members/jbossas/freezone/docs/Server_Configuration_Guide/beta422/html/index.html">JBoss Application Server Administration and Development Guide</ulink>.</para>
</formalpara>
<para>Download the Call-Forwarding Service&apos;s WAR file from here: <ulink url="https://oss.sonatype.org/content/groups/public/org/mobicents/servlet/sip/examples/call-forwarding/&VERSION;/call-forwarding-&VERSION;.war"/>.</para>
<para>Download the Call-Forwarding Service&apos;s DAR file from here: <ulink url="https://sipservlets.googlecode.com/git/sip-servlets-examples/call-forwarding/call-forwarding-b2bua-servlet-dar.properties"/>.</para>
<formalpara id="sfss-binary-Call-Forwarding_Service-Installing">
<title>Installing</title>
<para>Both the <filename>call-forwarding-&VERSION;.war</filename> WAR file
and the <filename>call-forwarding-servlet-dar.properties</filename>
DAR file that you downloaded should be placed into different
directories in your SIP Servlet Server installation hierarchy. Which
directory depends on whether you are using the Call-Forwarding Service
with &SHORT_PLATFORM_NAME; for JBoss or with &SHORT_PLATFORM_NAME; for Tomcat:</para>
</formalpara>
<variablelist>
<varlistentry>
<term>&SHORT_PLATFORM_NAME; for JBoss</term>
<listitem>
<para>Place <filename>call-forwarding-&VERSION;.war</filename> into the
<filename><envar>$JBOSS_HOME</envar>/standalone/deployments/</filename>
directory, and
<filename>call-forwarding-servlet-dar.properties</filename> into
the
<filename><envar>$JBOSS_HOME</envar>/standalone/configuration/dars/</filename>
directory.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>&SHORT_PLATFORM_NAME; for Tomcat</term>
<listitem>
<para>Place <filename>call-forwarding-&VERSION;.war</filename> into the
<filename><envar>$CATALINA_HOME</envar>/webapps/</filename>
directory, and
<filename>call-forwarding-servlet-dar.properties</filename> into
the <filename><envar>$CATALINA_HOME</envar>/conf/dars/</filename>
directory.</para>
</listitem>
</varlistentry>
</variablelist>
<formalpara id="sfss-binary-Call-Forwarding_Service-Configuring">

<title>Configuring</title>
<!--
<para>The <literal>darConfigurationFileLocation</literal> attribute of
the <literal>Service</literal> element must be set to the value
<userinput>conf/dars/call-forwarding-b2bua-servlet-dar.properties</userinput>.
The instructions for doing so are given below by SIP Servlets Server
type:</para>
-->
</formalpara>

<variablelist>
<varlistentry>

<term>&SHORT_PLATFORM_NAME; for JBoss</term>
<listitem>


<!--
<para>Open the
<filename><envar>JBOSS_HOME</envar>/standalone/deployments/jboss-web.deployer/server.xml</filename>
configuration file and find the <literal>Service</literal>
element. Add an attribute to it called
<userinput>darConfigurationFileLocation</userinput>, and set it to
<replaceable>conf/dars/call-forwarding-b2bua-servlet-dar.properties</replaceable>:</para>

-->

<example id="sfss-Editing_SS_for_JBoss_server.xml_for_the_Call-Forwarding_Service">
<title>Editing &SHORT_PLATFORM_NAME; for JBoss&apos;s standalone-sip.xml for the Call-Forwarding Service</title>
</example>
<screen>
In the $JBOSS_HOME/standalone/configuration/standalone-sip.xml search for the line below
 
 &lt;subsystem xmlns="urn:org.mobicents:sip-servlets-as7:1.0" 
 application-router="dars/mobicents-dar.properties"  

change it to the following

 &lt;subsystem xmlns="urn:org.mobicents:sip-servlets-as7:1.0" 
 application-router="dars/call-forwarding-b2bua-servlet-dar.properties" 

 
</screen>


<!--
<programlisting role="XML">&lt;Service
name=&quot;jboss.web&quot;
className=&quot;org.mobicents.servlet.sip.startup.SipStandardService&quot;
sipApplicationDispatcherClassName=&quot;org.mobicents.servlet.sip.core.SipApplicationDispatcherImpl&quot;
darConfigurationFileLocation=&quot;conf/dars/call-forwarding-b2bua-servlet-dar.properties&quot;
sipStackPropertiesFile=&quot;conf/mss-sip-stack.properties&quot;&gt;</programlisting>

-->


<!--
<para>Make sure that the configuration file only contains one
<literal>darConfigurationFileLocation</literal> attribute: your
new one.</para>
-->
</listitem>

</varlistentry>




<varlistentry>

<term>&SHORT_PLATFORM_NAME; for Tomcat</term>
<listitem>
<para>Open the
<filename><envar>$CATALINA_HOME</envar>/conf/server.xml</filename>
configuration file and find the <literal>Service</literal>
element. Add an attribute to it called
<userinput>darConfigurationFileLocation</userinput>, and set it to
<userinput>conf/dars/call-forwarding-b2bua-servlet-dar.properties</userinput>:</para>
<example id="sfss-Editing_MSS_for_Tomcats_server.xml_for_the_Call-Forwarding_Service">
<title>Editing &SHORT_PLATFORM_NAME; for Tomcat&apos;s server.xml for the Call-Forwarding Service</title>
<programlisting role="XML">&lt;Service
name=&quot;Sip-Servlets&quot;
className=&quot;org.mobicents.servlet.sip.startup.SipStandardService&quot;
sipApplicationDispatcherClassName=&quot;org.mobicents.servlet.sip.core.SipApplicationDispatcherImpl&quot;
darConfigurationFileLocation=&quot;conf/dars/call-forwarding-b2bua-servlet-dar.properties&quot;
sipStackPropertiesFile=&quot;conf/mss-sip-stack.properties&quot;&gt;</programlisting>
</example>
<para>Make sure that the configuration file only contains one
<literal>darConfigurationFileLocation</literal> attribute: your
new one.</para>
</listitem>
</varlistentry>
</variablelist>
<formalpara id="sfss-binary-Call-Forwarding_Service-Running">

<title>Running</title>
<para>Once the WAR and DAR files have been placed in the right
directories, and the JBoss Application Server or Tomcat Servlet
Container knows where to find them (which you specified in a
<filename>standalone-sip.xml</filename> and <filename>server.xml</filename>  files), then you should go ahead and
run the SIP Servlets Server.</para>
</formalpara>
<!--
<para>To learn how to run the SIP Servlets-enabled JBoss Application
Server, refer to <xref linkend="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Running"/>.</para>
<para>To learn how to run the SIP Servlets-enabled Tomcat Container,
refer to <ulink url="bbssswticar-binary-SIP_Servlets_Server_with_Tomcat-Running"/>.</para>
-->

<formalpara id="sfss-binary-Call-Forwarding_Service-Testing">
<title>Testing</title>
<para>The following procedure shows how to test the Call-Forwarding
Service.</para>
</formalpara>
<procedure>
<title/>
<step>
<para>Start two SIP soft-phones of your choice. Set the account
settings of the first SIP softphone to:</para>
<itemizedlist>
<listitem>
<para>Account name:
<userinput>forward-receiver</userinput></para>
</listitem>
<listitem>
<para>IP address: <userinput>127.0.0.1</userinput></para>
</listitem>
<listitem>
<para>Port: <userinput>5090</userinput></para>
</listitem>
</itemizedlist>
<para>Neither of the SIP soft-phones needs to be registered.</para>
</step>
<step>
<para>From the second phone, make a call to
<literal>sip:receiver@sip-servlets.com</literal>. The first phone,
&quot;forward-receiver&quot;, should now be ringing.</para>
</step>
</procedure>
<!--<formalpara
id="sfss-binary-Call-Forwarding_Service-Using">
<title>Using</title>
<para>&nbsp;</para>
</formalpara>
<formalpara id="sfss-binary-Call-Forwarding_Service-Stopping">
<title>Stopping</title>
<para>To learn how to stop the SIP Servlets-enabled JBoss Application
Server, refer to <xref linkend="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Stopping"/>.</para>
</formalpara>
<para>To learn how to stop the SIP Servlets-enabled Tomcat Container,
refer to <xref linkend="bssswticar-binary-SIP_Servlets_Server_with_Tomcat-Stopping"/>.</para>
<formalpara id="sfss-binary-Call-Forwarding_Service-Uninstalling">
<title>Uninstalling</title>
<para>Unless disk space is at a premium, there is usually no need to
uninstall the Call-Forwarding Service. However, if you will not be
using it again, you may want to unset or reset the
<literal>darConfigurationFileLocation</literal> attribute of the
<literal>Service</literal> element, which you set in the
<filename>server.xml</filename> configuration file in <xref linkend="sfss-binary-Call-Forwarding_Service-Configuring"/>.</para>
</formalpara>
<para>You may also wish to delete the WAR and DAR files for the
Call-Forwarding Service, which you installed in <xref linkend="sfss-binary-Call-Forwarding_Service-Installing"/>.</para>
-->

</section>
</section>
<section id="sfss-The_Call-Controller_Service">
<title>The Call-Controller Service</title>
<para>The Call-Controller service is a composition of two other services:
Call-Blocking and Call-Forwarding. Essentially, it performs the services
of both call-forwarding and call-blocking.</para>
<itemizedlist>
<listitem>
<para>To learn about how the Call-Blocking service works, refer to
<xref linkend="sfss-The_Call-Blocking_Service"/>.</para>
</listitem>
<listitem>
<para>To learn about how the Call-Forwarding service works, refer to
<xref linkend="sfss-The_Call-Forwarding_Service"/>.</para>
</listitem>
</itemizedlist>
<note id="sfss-Blocked_Contacts_and_Contacts_to_Forward_Cannot_Currently_Be_Configured">
<title>Blocked Contacts and Contacts to Forward Cannot Currently Be Configured</title>
<para>Both the list of blocked contacts and the list of contacts to
forward are currently both hard-coded. However, both of those models are
evolving toward the eventual use of databases.</para>
</note>
<!-- The Call-Controller Service --> <section id="sfss-binary-Call-Controller_Service--Installing_Configuring_and_Running">
<title>The Call-Controller Service: Installing, Configuring and Running</title>
<para>The Call-Controller service requires the two WAR files for the
Call-Blocking and Call-Forwarding services to be placed in the correct
directory inside your &PLATFORM_NAME; SIP Servlets Server binary installation.
However, the Call-Controller service does <emphasis>not</emphasis>
require their corresponding DAR files: you need only to download and
install a DAR file customized for the Call-Controller service. The
instructions below show you how to do precisely this; there is no need,
therefore, to first install either the Call-Blocking or the
Call-Forwarding services, though it is helpful to at least be familiar
with them.</para>
<formalpara id="sfss-binary-Call-Controller_Service-Pre-Install_Requirements_and_Prerequisites">
<title>Pre-Install Requirements and Prerequisites</title>
<para>The following requirements must be met before installation can begin.</para>
</formalpara>
<!-- <variablelist
id="sfss-binary-Call-Controller_Service-Hardware_Requirements">
<title>Hardware Requirements</title>
<varlistentry>
<term>Sufficient Disk Space</term>
<listitem>
<para>&nbsp;</para>
</listitem>
</varlistentry>
</variablelist>  

<variablelist id="sfss-binary-Call-Controller_Service-Software_Prerequisites">
<title>Software Prerequisites</title>
<varlistentry>
<term>Either an &SHORT_PLATFORM_NAME; for JBoss or an &SHORT_PLATFORM_NAME; for Tomcat Installation</term>
<listitem>
<para>The Call-Controller Service requires either an &SHORT_PLATFORM_NAME; for JBoss
or an &SHORT_PLATFORM_NAME; for Tomcat binary installation.</para>
<para>You can find detailed instructions on installing &SHORT_PLATFORM_NAME; for
JBoss here: <xref linkend="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Installing_Configuring_and_Running"/>.</para>
<para>You can find detailed instructions on installing &SHORT_PLATFORM_NAME; for
Tomcat here: <xref linkend="bssswticar-SIP_Servlets_Server_with_Tomcat-Installing_Configuring_and_Running"/>.</para>
</listitem>
</varlistentry>
</variablelist>
-->

<formalpara id="sfss-binary-Call-Controller_Service-Downloading">
<title>Downloading</title>
<para>The Call-Controller Service is comprised of two WAR files, one
for the Call-Forwarding service and one for Call-Blocking, and a
customized Call-Controller DAR file. You do not need to install the
DAR files for the Call-Forwarding or the Call-Blocking services. For
more information about WAR files, refer to the <ulink url="http://www.jboss.org/file-access/default/members/jbossas/freezone/docs/Server_Configuration_Guide/beta422/html/index.html">JBoss Application Server Administration and Development Guide</ulink>. For
more information about DAR files, refer to the <ulink url="http://jcp.org/en/jsr/detail?id=289">JSR 289 spec, Appendix C</ulink></para>
</formalpara>
<para>Download the Call-Blocking Service&apos;s WAR file from here: <ulink url="https://oss.sonatype.org/content/groups/public/org/mobicents/servlet/sip/examples/call-blocking/&VERSION;/call-blocking-&VERSION;.war"/>.</para>
<para>Download the Call-Forwarding Service&apos;s WAR file from here: <ulink url="https://oss.sonatype.org/content/groups/public/org/mobicents/servlet/sip/examples/call-forwarding/&VERSION;/call-forwarding-&VERSION;.war"/>.</para>
<para>Download the Call-Controller Service&apos;s DAR file from here: <ulink url="https://sipservlets.googlecode.com/git/sip-servlets-examples/call-blocking/call-controller-servlet-dar.properties"/>.</para>
<formalpara id="sfss-binary-Call-Controller_Service-Installing">
<title>Installing</title>
<para>The <filename>call-blocking-&VERSION;.war</filename>,
<filename>call-forwarding-&VERSION;.war</filename> and
<filename>call-controller-servlet-dar.properties</filename> archive
files that you downloaded should be placed into different directories
in your SIP Servlet Server installation hierarchy. Which directory
depends on whether you are using the Call-Controller Service with &SHORT_PLATFORM_NAME;
for JBoss or with &SHORT_PLATFORM_NAME; for Tomcat:</para>
</formalpara>
<variablelist>
<varlistentry>
<term>&SHORT_PLATFORM_NAME; for JBoss</term>
<listitem>
<para>Place <filename>call-blocking-&VERSION;.war</filename> and
<filename>call-forwarding-&VERSION;.war</filename> into the
<filename><envar>$JBOSS_HOME</envar>/standalone/deployments/</filename>
directory, and
<filename>call-controller-servlet-dar.properties</filename> into
the
<filename><envar>$JBOSS_HOME</envar>/standalone/configuration/dars/</filename>
directory.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>&SHORT_PLATFORM_NAME; for Tomcat</term>
<listitem>
<para>Place <filename>call-blocking-&VERSION;.war</filename> and
<filename>call-forwarding-&VERSION;.war</filename> into the
<filename><envar>$CATALINA_HOME</envar>/webapps/</filename>
directory, and
<filename>call-controller-servlet-dar.properties</filename> into
the <filename><envar>$CATALINA_HOME</envar>/conf/dars/</filename>
directory.</para>
</listitem>
</varlistentry>
</variablelist>
<formalpara id="sfss-binary-Call-Controller_Service-Configuring">

<title>Configuring</title>
<!--
<para>The <literal>darConfigurationFileLocation</literal> attribute of
the <literal>Service</literal> element must be set to the value
<userinput>conf/dars/call-controller-servlet-dar.properties</userinput>.
Instructions for doing so are given below by SIP Servlets Server
type:</para>
-->

</formalpara>
<variablelist>
<varlistentry>
-->
<term>&SHORT_PLATFORM_NAME; for JBoss</term>
<listitem>
<!--
<para>Open the
<filename><envar>JBOSS_HOME</envar>/standalone/deployments/jboss-web.deployer/server.xml</filename>
configuration file and find the <literal>Service</literal>
element. Add an attribute to it called
<userinput>darConfigurationFileLocation</userinput>, and set it to
<replaceable>conf/dars/call-controller-servlet-dar.properties </replaceable>:</para>


<example id="sfss-Editing_SS_for_JBoss_server.xml_for_the_Call-Controller_Service">
-->

<example>
<title>Editing &SHORT_PLATFORM_NAME; for JBoss&apos;s standalone-sip.xml for the Call-Controller Service</title>

<screen>
In the $JBOSS_HOME/standalone/configuration/standalone-sip.xml search for the line below
 
 &lt;subsystem xmlns="urn:org.mobicents:sip-servlets-as7:1.0" 
 application-router="dars/mobicents-dar.properties"  

change it to the following

 &lt;subsystem xmlns="urn:org.mobicents:sip-servlets-as7:1.0" 
 application-router="dars/call-controller-servlet-dar.properties" 

 
</screen>

<!--
<programlisting role="XML">&lt;Service
name=&quot;jboss.web&quot;
className=&quot;org.mobicents.servlet.sip.startup.SipStandardService&quot;
sipApplicationDispatcherClassName=&quot;org.mobicents.servlet.sip.core.SipApplicationDispatcherImpl&quot;
darConfigurationFileLocation=&quot;conf/dars/call-controller-servlet-dar.properties &quot;
sipStackPropertiesFile=&quot;conf/mss-sip-stack.properties&quot;&gt;</programlisting>
-->

</example>


<para>Make sure that the configuration file only contains one
<literal>darConfigurationFileLocation</literal> attribute: your
new one.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>&SHORT_PLATFORM_NAME; for Tomcat</term>
<listitem>
<para>Open the
<filename><envar>$CATALINA_HOME</envar>/conf/server.xml</filename>
configuration file and find the <literal>Service</literal>
element. Add an attribute to it called
<userinput>darConfigurationFileLocation</userinput>, and set it to
<userinput>conf/dars/call-controller-servlet-dar.properties </userinput>:</para>

<example id="sfss-Editing_MSS_for_Tomcats_server.xml_for_the_Call-Controller_Service">
<title>Editing &SHORT_PLATFORM_NAME; for Tomcat&apos;s server.xml for the Call-Controller Service</title>

<programlisting role="XML">&lt;Service
name=&quot;Sip-Servlets&quot;
className=&quot;org.mobicents.servlet.sip.startup.SipStandardService&quot;
sipApplicationDispatcherClassName=&quot;org.mobicents.servlet.sip.core.SipApplicationDispatcherImpl&quot;
darConfigurationFileLocation=&quot;conf/dars/call-controller-servlet-dar.properties &quot;
sipStackPropertiesFile=&quot;conf/mss-sip-stack.properties&quot;&gt;</programlisting>


</example>
<para>Make sure that the configuration file only contains one
<literal>darConfigurationFileLocation</literal> attribute: your
new one.</para>
</listitem>
</varlistentry>
</variablelist>
<formalpara id="sfss-binary-Call-Controller_Service-Running">
<title>Running</title>
<para>Once the WAR and DAR files have been placed in the right
directories, and the JBoss Application Server or Tomcat Servlet
Container knows where to find them (which you specified in a
<filename>server.xml</filename> file), then you should go ahead and
run the SIP Servlets Server.</para>
</formalpara>
<!--
<para>To learn how to run the SIP Servlets-enabled JBoss Application
Server, refer to <xref linkend="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Running"/>.</para>
<para>To learn how to run the SIP Servlets-enabled Tomcat Container,
refer to <xref linkend="bssswticar-binary-SIP_Servlets_Server_with_Tomcat-Running"/>.</para>
-->
<formalpara id="sfss-binary-Call-Controller_Service-Testing">
<title>Testing</title>
<para>Two use-cases can be distinguished for the Call-Controller
service: one in which a call is blocked, and another in which a call
is forwarded. Therefore, we have two cases for which we can test the
Call-Controller.</para>
</formalpara>
<procedure id="sfss-Blocking_a_Call_with_the_Call-Controller">
<title>Blocking a Call with Call-Controller</title>
<step>
<para>Start two SIP soft-phones of your choice. Set the account
settings of the SIP soft-phones to:</para>
<itemizedlist>
<title>Relevant First Softphone Settings</title>
<listitem>
<para>Account name:
<userinput>forward-receiver</userinput></para>
</listitem>
<listitem>
<para>IP address: <userinput>127.0.0.1</userinput></para>
</listitem>
<listitem>
<para>Port: <userinput>5090</userinput></para>
</listitem>
</itemizedlist>
<itemizedlist>
<title>Relevant Second Softphone Settings</title>
<listitem>
<para>Account name: <userinput>blocked-sender</userinput></para>
</listitem>
</itemizedlist>
<para>Neither of the SIP soft-phones needs to be registered.</para>
</step>
<step>
<para>From the second phone, <literal>blocked-sender</literal>, make
a call to <literal>sip:receiver@sip-servlets.com</literal>. You
should receive a <literal>FORBIDDEN</literal> response.</para>
</step>
</procedure>
<procedure id="sfss-Forwarding_a_Call_with_the_Call-Controller">
<title>Forwarding a Call with Call-Controller</title>
<step>
<para>Start two SIP soft-phones of your choice. Set the account
settings of the SIP soft-phones to:</para>
<itemizedlist>
<title>Relevant First Softphone Settings</title>
<listitem>
<para>Account name:
<userinput>forward-receiver</userinput></para>
</listitem>
<listitem>
<para>IP address: <userinput>127.0.0.1</userinput></para>
</listitem>
<listitem>
<para>Port: <userinput>5090</userinput></para>
</listitem>
</itemizedlist>
<itemizedlist>
<title>Relevant Second Softphone Settings</title>
<listitem>
<para>Account name: <userinput>forward-sender</userinput></para>
</listitem>
</itemizedlist>
<para>Neither of the SIP soft-phones needs to be registered.</para>
</step>
<step>
<para>From the second softphone, <literal>forward-sender</literal>,
make a call to <literal>sip:receiver@sip-servlets.com</literal>. The
first phone, <literal>forward-receiver</literal>, should now be
ringing.</para>
</step>
</procedure>
<!--<formalpara
id="sfss-binary-Call-Controller_Service-Using">
<title>Using</title>
<para>&nbsp;</para>
</formalpara>

 <formalpara id="sfss-binary-Call-Controller_Service-Stopping">
<title>Stopping</title>
<para>To learn how to stop the SIP Servlets-enabled JBoss Application
Server, refer to <xref linkend="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Stopping"/>.</para>
</formalpara>
<para>To learn how to stop the SIP Servlets-enabled Tomcat Container,
refer to <xref linkend="bssswticar-binary-SIP_Servlets_Server_with_Tomcat-Stopping"/>.</para>
<formalpara id="sfss-binary-Call-Controller_Service-Uninstalling">
<title>Uninstalling</title>
<para>Unless disk space is at a premium, there is usually no need to
uninstall the Call-Controller Service. However, if you will not be
using it again, you may want to unset or reset the
<literal>darConfigurationFileLocation</literal> attribute of the
<literal>Service</literal> element, which you set in the
<filename>server.xml</filename> configuration file in <xref linkend="sfss-binary-Call-Controller_Service-Configuring"/>.</para>
</formalpara>
<para>You may also wish to delete the WAR and DAR files for the
Call-Controller Service, which you installed in <xref linkend="sfss-binary-Call-Controller_Service-Installing"/>.</para>
-->
<note>
<para><xref linkend="ssea-SIP_Servlet_Example_Applications"/>
provides more information about other service examples
available.</para>
</note>
</section>
</section>
<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="concept-section-SS_Media_IPBX.xml"/>
<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="concept-chapter-SS_click2call.xml"/>
</section>


