<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "SIP_Servlets_Server_User_Guide.ent">
%BOOK_ENTITIES;
]>


<chapter id="Appendix">
  <title>Apendix</title>




<section id="install-configure-JDK">
	<title>Java Development Kit (<acronym>JDK</acronym>): Installing, Configuring and Running</title>
	<para>
		The <application>&PLATFORM_NAME; Platform</application> is written in Java; therefore, before running any <application>&PLATFORM_NAME;</application> server, you must have a working Java Runtime Environment (<acronym>JRE</acronym>) or Java Development Kit (<acronym>JDK</acronym>) installed on your system. In addition, the JRE or JDK you are using to run <application>&PLATFORM_NAME;</application> must be version 5 or higher<footnote>
		<para>
			At this point in time, it is possible to run most <application>&PLATFORM_NAME;</application> servers, such as the JAIN SLEE Server, using a Java 6 JRE or JDK. Be aware, however, that presently the XML Document Management Server does not run on Java 6. We suggest checking the &PLATFORM_NAME; web site, forums or discussion pages if you need to inquire about the status of running the XML Document Management Server with Java 6.
		</para>
		</footnote>.
	</para>



<section id="JRE-or-JDK-32Bit-or-64Bit" >
<title> JRE versus JDK - 32-Bit versus 64-Bit</title>
	<formalpara>
		<title>Should I Install the JRE or JDK?</title>
		<para>
			Although you can run <application>&PLATFORM_NAME;</application> servers using the Java Runtime Environment, we assume that most users are developers interested in developing Java-based, <application>&PLATFORM_NAME;</application>-driven solutions. Therefore, in this guide we take the tact of showing how to install the full Java Development Kit.
		</para>
	</formalpara>
	<formalpara>
		<title>Should I Install the 32-Bit or the 64-Bit JDK, and Does It Matter?</title>
		<para>
			Briefly stated: if you are running on a 64-Bit Linux or Windows platform, you should consider installing and running the 64-bit JDK over the 32-bit one. Here are some heuristics for determining whether you would rather run the 64-bit Java Virtual Machine (JVM) over its 32-bit cousin for your application:
		</para>
	</formalpara>
	<itemizedlist>
		<listitem>
			<para>
				Wider datapath: the pipe between RAM and CPU is doubled, which improves the performance of memory-bound applications when using a 64-bit JVM.
			</para>
		</listitem>
		<listitem>
			<para>
				64-bit memory addressing gives virtually unlimited (1 exabyte) heap allocation. However large heaps affect garbage collection.
			</para>
		</listitem>
		<listitem>
			<para>
				Applications that run with more than 1.5 GB of RAM (including free space for garbage collection optimization) should utilize the 64-bit JVM.
			</para>
		</listitem>
		<listitem>
			<para>
				Applications that run on a 32-bit JVM and do not require more than minimal heap sizes will gain nothing from a 64-bit JVM. Barring memory issues, 64-bit hardware with the same relative clock speed and architecture is not likely to run Java applications faster than their 32-bit cousin.
			</para>
		</listitem>
	</itemizedlist>
	<para>
		Note that the following instructions detail how to download and install the 32-bit JDK, although the steps are nearly identical for installing the 64-bit version.
	</para>
	<!-- <formalpara
			id="jdkicar-binary-Java_Development_Kit-Pre-Install Requirements and Prerequisites">
			<title>Pre-Install Requirements and Prerequisites</title>
			<para></para>
		</formalpara> --><!--  <variablelist
			condition="jdkicar-binary-Java_Development_Kit-Hardware_Requirements">
			<title>Hardware Requirements</title>
			<varlistentry>
				<term>Sufficient Disk Space</term>
				<listitem>
					<para></para>
				</listitem>
			</varlistentry>
		</variablelist>  --><!--  <variablelist
			condition="jdkicar-binary-Java_Development_Kit-Software_Prerequisites">
			<title>Software Prerequisites</title>
			<varlistentry>
				<term></term>
				<listitem>
					<para></para>
				</listitem>
			</varlistentry>
		</variablelist>  -->

</section>


<section id="Downloading-JDK">

<title>Downloading JDK </title>

	<formalpara>
		<!-- id="jdkicar-binary-Java_Development_Kit-Downloading"> -->




		<para>
			You can download the Sun JDK 5.0 (Java 2 Development Kit) from Sun&#39;s website: <ulink
				url="http://java.sun.com/javase/downloads/index_jdk5.jsp"></ulink>. Click on the <guilabel>Download</guilabel> link next to "JDK 5.0 Update <replaceable>&lt;x&gt;</replaceable>" (where <replaceable>&lt;x&gt;</replaceable> is the latest minor version release number). On the next page, select your language and platform (both architecture—whether 32- or 64-bit—and operating system), read and agree to the <literal>Java Development Kit 5.0 License Agreement</literal>, and proceed to the download page.
		</para>
	</formalpara>
	<para>
		The Sun website will present two download alternatives to you: one is an RPM inside a self-extracting file (for example, <filename>jdk-1_5_0_16-linux-i586-rpm.bin</filename>), and the other is merely a self-extracting file (e.g. <filename>jdk-1_5_0_16-linux-i586.bin</filename>). If you are installing the JDK on Red Hat Enterprise Linux, Fedora, or another RPM-based Linux system, we suggest that you download the self-extracting file containing the RPM package, which will set up and use the SysV service scripts in addition to installing the JDK. We also suggest installing the self-extracting RPM file if you will be running <application>&PLATFORM_NAME;</application> in a production environment.
	</para>
	<formalpara>
		<!-- id="jdkicar-binary-Java_Development_Kit-Installing"> -->
		<title>Installing</title>
		<para>
			The following procedures detail how to install the Java Development Kit on both Linux and Windows.
		</para>
	</formalpara>
	<procedure>
		<title>Installing the JDK on Linux</title>
		<step>
			<para>
				Regardless of which file you downloaded, you can install it on Linux by simply making sure the file is executable and then running it:
			</para>
			<!--  ~]$ chmod +x "jdk-1_5_0_<minor_version>-linux-<architecture>-rpm.bin"
~]$ ./"jdk-1_5_0_<minor_version>-linux-<architecture>-rpm.bin"  -->
			<screen>~]$ chmod +x "jdk-1_5_0_&lt;minor_version&gt;-linux-&lt;architecture&gt;-rpm.bin"
~]$ ./"jdk-1_5_0_&lt;minor_version&gt;-linux-&lt;architecture&gt;-rpm.bin"</screen>
		</step>
	</procedure>

	<note>
		<title>Moving from Non-RPM Installer to SysV Service Scripts</title>
		<para>
			If you download the non-RPM self-extracting file (and installed it), and you are running on an RPM-based system, you can still set up the SysV service scripts by downloading and installing one of the <literal>-compat</literal> packages from the JPackage project. Remember to download the <literal>-compat</literal> package which corresponds correctly to the minor release number of the JDK you installed. The compat packages are available from <ulink
				url="ftp://jpackage.hmdc.harvard.edu/JPackage/1.7/generic/RPMS.non-free/"></ulink>.
		</para>
	</note>
	<important>
		<para>
			You do not need to install a <literal>-compat</literal> package in addition to the JDK if you installed the self-extracting RPM file! The <literal>-compat</literal> package merely performs the same SysV service script set up that the RPM version of the JDK installer does.
		</para>
	</important>

</section>

<section id="install-JDK-on-windows" >

<title>Installing JDK on Windows</title>


	<procedure>

		<step>
			<para>
				Using Explorer, simply double-click the downloaded self-extracting installer and follow the instructions to install the JDK.
			</para>
		</step>
	</procedure>




	<formalpara>
		<!-- id="jdkicar-binary-Java_Development_Kit-Configuring"> -->
		<title>Configuring</title>
		<para>
			Configuring your system for the JDK consists in two tasks: setting the <envar>JAVA_HOME</envar> environment variable, and ensuring that the system is using the proper JDK (or JRE) using the <command>alternatives</command> command. Setting <envar>JAVA_HOME</envar> usually overrides the values for <command>java</command>, <command>javac</command> and <command>java_sdk_1.5.0</command> in <command>alternatives</command>, but we will set them all just to be safe and consistent.
		</para>
	</formalpara>


</section>

<section id="setting-ENV-linux">

<title>Setting Linux JAVA_HOME Environment Variables </title>
	<variablelist>

		<varlistentry>
			<term>Setting the <envar>JAVA_HOME</envar> Environment Variable on Generic Linux</term>
			<listitem>
				<para>
					After installing the JDK, you must ensure that the <envar>JAVA_HOME</envar> environment variable exists and points to the location of your JDK installation.
				</para>
				<formalpara>
					<title>Setting the <envar>JAVA_HOME</envar> Environment Variable on Linux</title>
					<para>
						You can determine whether <envar>JAVA_HOME</envar> is set on your system by <command>echo</command>ing it on the command line:
					</para>
				</formalpara>
				<!--  ~]$ echo $JAVA_HOME  -->
				<screen>~]$ echo $JAVA_HOME</screen>
				<para>
					If <envar>JAVA_HOME</envar> is not set already, then you must set its value to the location of the JDK installation on your system. You can do this by adding two lines to your personal <filename>~/.bashrc</filename> configuration file. Open <filename>~/.bashrc</filename> (or create it if it doesn&#39;t exist) and add a line similar to the following one anywhere inside the file:
				</para>

				<programlisting>export JAVA_HOME="/usr/lib/jvm/jdk1.5.0_&lt;version&gt;"
</programlisting>
				<para>
					You should also set this environment variable for any other users who will be running <application>&PLATFORM_NAME;</application> (any environment variables <command>export</command>ed from <filename>~/.bashrc</filename> files are local to that user).
				</para>
			</listitem>
		</varlistentry>
</variablelist>

</section>

<section id="setting-correct-java-version">

<title>Setting the Correct Java Version </title>

<varlistentry>

<term>Setting <envar>java</envar>, <envar>javac</envar> and <envar>java_sdk_1.5.0</envar> Using the <command>alternatives</command> command </term>
			<listitem>
				<formalpara>
					<title>Selecting the Correct System JVM on Linux using <command>alternatives</command>
					</title>
					<para>
						On systems with the <command>alternatives</command> command, including Red Hat Enterprise Linux and Fedora, you can easily choose which JDK (or JRE) installation you wish to use, as well as which <command>java</command> and <command>javac</command> executables should be run when called.
					</para>
				</formalpara>
				<para>
					<emphasis>As the root user</emphasis>, call <command>/usr/sbin/alternatives</command> with the <option>--config java</option> option to select between JDKs and JREs installed on your system:
				</para>

				<programlisting>root@localhost ~]$ /usr/sbin/alternatives --config java

There are 3 programs which provide &#39;java&#39;.

  Selection    Command
-----------------------------------------------
   1           /usr/lib/jvm/jre-1.5.0-gcj/bin/java
   2           /usr/lib/jvm/jre-1.6.0-sun/bin/java
*+ 3         /usr/lib/jvm/jre-1.5.0-sun/bin/java


Enter to keep the current selection[+], or type selection number:
</programlisting>
				<para>
					In our case, we want to use the Sun JDK, version 5, that we downloaded and installed, to run the <command>java</command> executable. In the <command>alternatives</command> information printout above, a plus (<literal>+</literal>) next to a number indicates the one currently being used. As per <command>alternatives</command>&#39; instructions, pressing <keycap>Enter</keycap> will simply keep the current JVM, or you can enter the number corresponding to the JVM you would prefer to use.
				</para>
				<para>
					Repeat the procedure above for the <command>javac</command> command and the <literal>java_sdk_1.5.0</literal> environment variable, <emphasis>as the root user</emphasis>:
				</para>

				<screen>~]$ /usr/sbin/alternatives --config javac</screen>

				<screen>~]$ /usr/sbin/alternatives --config java_sdk_1.5.0</screen>
			</listitem>
		</varlistentry>


</section>

<section id="setting-ENV-windows">

<title>Setting JAVA_HOME Environment Variables on Windows</title>

<variablelist>
	
<varlistentry>

<term>Setting the <envar>JAVA_HOME</envar> Environment Variable on Windows</term>
			<listitem>
				<para>
					For information on how to set environment variables in Windows, refer to <ulink
						url="http://support.microsoft.com/kb/931715"></ulink>.
				</para>
			</listitem>
		</varlistentry>
	</variablelist>

<!-- id="jdkicar-binary-Java_Development_Kit-Testing"> -->

<!--

	<formalpara>

		<title>Testing</title>
		<para>
			Finally, to make sure that you are using the correct JDK or Java version (5 or higher), and that the java executable is in your <envar>PATH</envar>, run the <command>java <option>-version</option>
			</command> command in the terminal from your home directory:
		</para>
	</formalpara>

	<screen>~]$ java -version
java version "1.5.0_16"
Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_16-b03)
Java HotSpot(TM) Client VM (build 1.5.0_16-b03, mixed mode, sharing)</screen>

-->
	<!-- <formalpara
		id="jdkicar-binary-Java_Development_Kit-Running">
		<title>Running</title>
		<para></para>
	</formalpara> --><!--  <formalpara
		id="jdkicar-binary-Java_Development_Kit-Stopping">
		<title>Stopping</title>
		<para></para>
	</formalpara>  -->

</section>


<section id="install-JDK-linux-windows">
<title> Uninstalling JDK on Linux and Windows</title>
<formalpara>
		<!-- id="jdkicar-binary-Java_Development_Kit-Uninstalling"> -->
		<title>Uninstalling</title>
		<para>
			There is usually no reason (other than space concerns) to remove a particular JDK from your system, given that you can switch between JDKs and JREs easily using <command>alternatives</command>, and/or by setting <envar>JAVA_HOME</envar>.
		</para>
	</formalpara>
	<formalpara>
		<title>Uninstalling the JDK on Linux</title>
		<para>
			On RPM-based systems, you can uninstall the JDK using the <command>yum <option>remove &lt;jdk_rpm_name&gt;</option>
			</command> command.
		</para>
	</formalpara>
	<formalpara>
		<title>Uninstalling the JDK on Windows</title>
		<para>
			On Windows systems, check the JDK entry in the <literal>Start</literal> menu for an uninstall command, or use <literal>Add/Remove Programs</literal>.
		</para>
	</formalpara>
</section>







<section id="setting-jboss-ENV-variable-windows-unix">
	<title>Setting the JBOSS_HOME Environment Variable</title>
	<para>
		The <application>&PLATFORM_NAME; Platform</application> (<application>&PLATFORM_NAME;</application>) is built on top of the <application>JBoss Application Server</application> (<application>JBoss AS</application>). You do not need to set the <envar>JBOSS_HOME</envar> environment variable to run any of the <application>&PLATFORM_NAME; Platform</application> servers <emphasis>unless</emphasis> <envar>JBOSS_HOME</envar> is <emphasis>already</emphasis> set.
	</para>
	<para>The best way to know for sure whether <envar>JBOSS_HOME</envar> was set previously or not is to perform a simple check which may save you time and frustration.</para>
	<formalpara>
		<title>Checking to See If JBOSS_HOME is Set on Unix</title>
		<para>At the command line, <command>echo</command>
			<userinput>$JBOSS_HOME</userinput> to see if it is currently defined in your environment:</para>
	</formalpara>
	<!--  ~]$ echo $JBOSS_HOME  -->
	<screen>~]$ echo $JBOSS_HOME</screen>
	<para>The <application>&PLATFORM_NAME; Platform</application> and most &PLATFORM_NAME; servers are built on top of the <application>JBoss Application Server</application> (<application>JBoss AS</application>). When the <application>&PLATFORM_NAME; Platform</application> or &PLATFORM_NAME; servers are built <emphasis>from source</emphasis>, then <envar>JBOSS_HOME</envar> <emphasis>must</emphasis> be set, because the &PLATFORM_NAME; files are installed into (or <quote>over top of</quote> if you prefer) a clean <application>JBoss AS</application> installation, and the build process assumes that the location pointed to by the <envar>JBOSS_HOME</envar> environment variable at the time of building is the <application>JBoss AS</application> installation into which you want it to install the &PLATFORM_NAME; files.
	</para>
	<para>This guide does not detail building the <application>&PLATFORM_NAME; Platform</application> or any &PLATFORM_NAME; servers from source. It is nevertheless useful to understand the role played by <application>JBoss AS</application> and <envar>JBOSS_HOME</envar> in the &PLATFORM_NAME; ecosystem.</para>
	<para>
		The immediately-following section considers whether you need to set <envar>JBOSS_HOME</envar> at all and, if so, when. The subsequent sections detail how to set <envar>JBOSS_HOME</envar> on Unix and Windows
	</para>
	<important>
		<para>
			Even if you fall into the category below of <emphasis>not needing</emphasis> to set <envar>JBOSS_HOME</envar>, you may want to for various reasons anyway. Also, even if you are instructed that you do <emphasis>not need</emphasis> to set <envar>JBOSS_HOME</envar>, it is good practice nonetheless to check and make sure that <envar>JBOSS_HOME</envar> actually <emphasis>isn&#39;t</emphasis> set or defined on your system for some reason. This can save you both time and frustration.
		</para>
	</important>
	<bridgehead>You <emphasis>DO NOT NEED</emphasis> to set <envar>JBOSS_HOME</envar> if...</bridgehead>
	<itemizedlist>
		<listitem>
			<para>
				...you have installed the <application>&PLATFORM_NAME; Platform</application> binary distribution.
			</para>
		</listitem>
		<listitem>
			<para>
				...you have installed a &PLATFORM_NAME; server binary distribution <emphasis>which bundles <application>JBoss AS</application>.</emphasis>
			</para>
		</listitem>
	</itemizedlist>
	<bridgehead>You <emphasis>MUST</emphasis> set <envar>JBOSS_HOME</envar> if...</bridgehead>
	<itemizedlist>
		<listitem>
			<para>
				...you are installing the <application>&PLATFORM_NAME; Platform</application> or any of the &PLATFORM_NAME; servers <emphasis>from source</emphasis>.
			</para>
		</listitem>
		<listitem>
			<para>
				...you are installing the <application>&PLATFORM_NAME; Platform</application> binary distribution, or one of the &PLATFORM_NAME; server binary distributions, which <emphasis>do not</emphasis> bundle <application>JBoss AS</application>.
			</para>
		</listitem>
	</itemizedlist>
	<para>
		Naturally, if you installed the <application>&PLATFORM_NAME; Platform</application> or one of the &PLATFORM_NAME; server binary releases which <emphasis>do not</emphasis> bundle <application>JBoss AS</application>, yet requires it to run, then you should <ulink
			url="http://docs.jboss.org/jbossas/docs/Installation_And_Getting_Started_Guide/5/html_single/index.html">install <application>JBoss AS</application>
		</ulink> before setting <envar>JBOSS_HOME</envar> or proceeding with anything else.
	</para>
	<formalpara>
		<title>Setting the JBOSS_HOME Environment Variable on Unix</title>
		<para>
			The <envar>JBOSS_HOME</envar> environment variable must point to the directory which contains all of the files for the <phrase><application>&PLATFORM_NAME; Platform</application> or individual &PLATFORM_NAME; server</phrase> that you installed. As another hint, this topmost directory contains a <filename>bin</filename> subdirectory.
		</para>
	</formalpara>
	<para>
		Setting <envar>JBOSS_HOME</envar> in your personal <filename>~/.bashrc</filename> startup script carries the advantage of retaining effect over reboots. Each time you log in, the environment variable is sure to be set for you, as a user. On Unix, it is possible to set <envar>JBOSS_HOME</envar> as a system-wide environment variable, by defining it in <filename>/etc/bashrc</filename>, but this method is neither recommended nor detailed in these instructions.
	</para>
	<procedure>
		<title>To Set JBOSS_HOME on Unix...</title>
		<step>
			<para>
				Open the <filename>~/.bashrc</filename> startup script, which is a hidden file in your home directory, in a text editor, and insert the following line on its own line while substituting for the actual install location on your system:
			</para>
			<!--  export JBOSS_HOME="/home/<replaceable>&lt;username&gt;</replaceable>/<replaceable>&lt;path&gt;</replaceable>/<replaceable>&lt;to&gt;</replaceable>/<replaceable>&lt;install_directory&gt;</replaceable>"  -->
			<screen>export JBOSS_HOME="/home/&lt;username&gt;/&lt;path&gt;/&lt;to&gt;/&lt;install_directory&gt;"</screen>
		</step>
		<step>
			<para>
				Save and close the <filename>.bashrc</filename> startup script.
			</para>
		</step>
		<step>
			<para>
				You should <command>source</command> the <filename>.bashrc</filename> script to force your change to take effect, so that <envar>JBOSS_HOME</envar> becomes set for the current session<footnote>
				<para>
					Note that any other terminals which were opened prior to your having altered <filename>.bashrc</filename> will need to <command>source</command>
						<filename>~/.bashrc</filename> as well should they require access to <envar>JBOSS_HOME</envar>.
				</para>
				</footnote>.
			</para>
			<!--  ~]$ source ~/.bashrc  -->
			<screen>~]$ source ~/.bashrc</screen>
		</step>
		<step>
			<para>
				Finally, ensure that <envar>JBOSS_HOME</envar> is set in the current session, and actually points to the correct location:
			</para>
			<note>
				<para>
					The command line usage below is based upon a binary installation of the <application>&PLATFORM_NAME; Platform</application>. In this sample output, <envar>JBOSS_HOME</envar> has been set correctly to the <replaceable>topmost_directory</replaceable> of the <application>&PLATFORM_NAME;</application> installation. Note that if you are installing one of the standalone <application>&PLATFORM_NAME;</application> servers (with <application>JBoss AS</application> bundled!), then <envar>JBOSS_HOME</envar> would point to the <replaceable>topmost_directory</replaceable> of your server installation.
				</para>
			</note>
			<!--  ~]$ echo $JBOSS_HOME
/home/silas/&HOME_LIN;  -->
			<screen>~]$ echo $JBOSS_HOME
/home/silas/&HOME_LIN;</screen>
		</step>
	</procedure>

	<formalpara>
		<title>Setting the JBOSS_HOME Environment Variable on Windows</title>
		<para>
			The <envar>JBOSS_HOME</envar> environment variable must point to the directory which contains all of the files for the <phrase>&PLATFORM_NAME; Platform or individual &PLATFORM_NAME; server</phrase> that you installed. As another hint, this topmost directory contains a <filename>bin</filename> subdirectory.
		</para>
	</formalpara>
	<para>
		For information on how to set environment variables in recent versions of Windows, refer to <ulink
			url="http://support.microsoft.com/kb/931715"></ulink>.
	</para>
</section>



<section id="setting-CATALINA_HOME-ENV-linux-windows">

<title>Setting CATALINA_HOME on Linux and Windows</title>

    <procedure id="bssswticar-Setting_the_CATALINA_HOME_Environment_Variable_on_Linux">
      <title>Setting the <envar>CATALINA_HOME</envar> Environment Variable on Linux</title>
      <step>
        <para>The <envar>CATALINA_HOME</envar> environment variable must point to the location of your Tomcat installation. Any &PLATFORM_NAME; server which runs on top of the Tomcat servlet container has a topmost directory, i.e. the directory in which you unzipped the zip file to install the server, and underneath that directory, a <filename>bin</filename> directory. <envar>CATALINA_HOME</envar> must be set to the topmost directory of your &PLATFORM_NAME; server installation.</para>
        <para>Setting this variable in your personal <filename>~/.bashrc</filename> file has the advantage that it will always be set (for you, as a user) each time you log in or reboot the system. To do so, open <filename>~/.bashrc</filename> in a text editor (or create the file if it doesn&apos;t already exist) and insert the following line anywhere in the file, taking care to substitute <filename>&lt;sip_server&gt;</filename> for the topmost directory of the &PLATFORM_NAME; server you installed:</para>
        <screen>export CATALINA_HOME=&quot;/home/&lt;username&gt;/&lt;path&gt;/&lt;to&gt;/&lt;sip_server&gt;&quot;</screen>
        <para>Save and close <filename>.bashrc</filename>.</para>
      </step>
      <step>
        <para>You can—and should—<command>source</command> your <filename>.bashrc</filename> file to make your change take effect (so that <envar>CATALINA_HOME</envar> is set) for the current session:</para>
        <screen>~]$ source ~/.bashrc</screen>
      </step>
      <step>
        <para>Finally, make sure that <envar>CATALINA_HOME</envar> has been set correctly (that it leads to the right directory), and has taken effect in the current session.</para>
        <para>The following command will show the path to the directory pointed to by <envar>CATALINA_HOME</envar>:</para>
        <screen>~]$ echo $CATALINA_HOME</screen>
        <para>To be absolutely sure, change your directory to the one pointed to by <envar>CATALINA_HOME</envar>:</para>
        <screen>~]$ cd $CATALINA_HOME &amp;&amp; pwd</screen>
      </step>
    </procedure>
    <procedure id="bssswticar-Setting_the_CATALINA_HOME_Environment_Variable_on_Windows">
      <title>Setting the <envar>CATALINA_HOME</envar> Environment Variable on Windows</title>
      <step>
        <para>The <envar>CATALINA_HOME</envar> environment variable must point to the location of your Tomcat installation. Any &PLATFORM_NAME; server which runs on top of the Tomcat servlet container has a topmost directory, i.e. the directory in which you unzipped the zip file to install the server, and underneath that directory, a <filename>bin</filename> directory. <envar>CATALINA_HOME</envar> must be set to the topmost directory of your &PLATFORM_NAME; server installation.</para>
        <para>If you are planning on running the Tomcat container as the Administrator, then you should, of course, set the <envar>CATALINA_HOME</envar> environment variable <emphasis>as the administrator</emphasis>, and if you planning to run Tomcat as a normal user, then set <envar>CATALINA_HOME</envar> as a user environment variable.</para>
        <para>For information on how to set environment variables in Windows, refer to <ulink url="http://support.microsoft.com/kb/931715"/>.</para>
      </step>
    </procedure>



</section>














<!--

<section id="diff-Jboss-telscale-sip">
    <title>Differences Between a Standard JBoss Installation and the &PLATFORM_NAME; SIP Servlets Version</title>

<formalpara>

    <para>Provided here is a list of differences between a standard JBoss Application Server installation one customized for SIP Servlets. The differences include:</para>
  </formalpara>
  <itemizedlist>
    <listitem>
      <para>The <filename>server/default/deploy</filename> directory contains both HTTP and SIP Servlet applications.</para>
    </listitem>
    <listitem>
      <para>The <filename>server/default/deploy/jbossweb.sar</filename> units have been modified to provide extended classes to the standard JBoss container classes, in order to allow SIP applications to be loaded and the SIP stack to be started.</para>
    </listitem>
    <listitem>
      <para>The <filename>server/default/deploy/jbossweb.sar</filename> <filename>context.xml</filename> files have been modified to allow the extended manager to manage SIP sessions and SIP application sessions in addition to HTTP sessions.</para>
    </listitem>
    <listitem>
      <para>The <filename>server/default/deploy/jbossweb.sar/</filename> <filename>server.xml</filename> file has been modified to provide extended classes to common JBoss Web containers.  The classes allow SIP applications to be loaded, and the SIP stack to be started.</para>
    </listitem>
    <listitem>
      <para>The <filename>server/default/deploy/jbossweb.sar/</filename> <filename>jboss-beans.xml</filename> file has been modified to allow the JBoss container to process SIP messages.</para>
    </listitem>
    <listitem>
      <para>The <filename>server/default/deployers/</filename> <filename>metadata-deployer-jboss-beans.xml</filename> file has been modified to allow JBoss to parse sip.xml deployment descriptors and SIP metadata annotations.</para>
    </listitem>
    <listitem>
      <para>The <filename>server/default/deployers/jbossweb.deployer/META-INF/war-deployers-jboss-beans.xml</filename> file have been modified so that it is now possible for JBoss containers to correctly deploy SIP servlets and converged applications.</para>
    </listitem>
    <listitem>
      <para>A <filename>dars</filename> directory containing all of the Default Application Router (DAR) properties files for using the various SIP Servlets applications (which come bundled with the release) has been added to the <filename>server/default/conf</filename> directory.</para>
    </listitem>
    <listitem>
      <para>Additional JAR files have been added to enable SIP Servlet functionality; these are located in the <filename>server/default/deploy/jbossweb.sar/</filename>, <filename>server/default/deployers/jbossweb.deployer/</filename> and <filename>common/lib</filename>directories.</para>
    </listitem>
  </itemizedlist>

</section>
-->


</section>






</chapter>
