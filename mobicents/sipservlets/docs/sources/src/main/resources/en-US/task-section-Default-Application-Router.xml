<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "SIP_Servlets_Server_User_Guide.ent">
%BOOK_ENTITIES;
]>
<section id="tsdar-Default-Application-Router">
  <title>Default Application Router</title>
  <para>The Application Router is called by the container to select a SIP
  Servlet application to service an initial request. It embodies the logic
  used to choose which applications to invoke.</para>
  <section id="tsdar-Application-Router-Role">
    <title>Role of the Application Router</title>
    <para>An Application Router is required for a container to function, but
    it is a separate logical entity from the container. The Application Router
    is responsible for application selection and does not implement
    application logic. For example, the Application Router cannot modify a
    request or send a response.</para>
    <para>There is no direct interaction between the Application Router and
    applications, only between the SIP Servlets Container and the Application
    Router.</para>
    <para>The
    SIP Servlets container is responsible for passing the required information to the Application Router within the initial request so the Application Router can make informed routing decisions. The Application Router is free to make use of any information or data stores, except for the information passed by the container. It is up to the individual implementation how the Application Router makes use of the information or data stores.</para>
    <para>The
    deployer in a SIP Servlet environment controls application composition by
    defining and deploying the Application Router implementation. Giving the
    deployer control over application composition is desirable because the deployer is solely responsible for the services available to subscribers.</para>
    <para>Furthermore, the SIP Servlets
    specification intentionally allows the Application Router implementation
    to consult arbitrary information or data stores. This is because the
    deployer maintains subscriber information and this information is often
    private and valuable.</para>
  </section>
  <section id="tsdar-Mobicents-Default-Application-Router">
    <title>&PLATFORM_NAME; Default Application Router</title>
    <para>&PLATFORM_NAME; SIP Servlets provides an implementation of the Default
    Application Router (DAR) as defined in the SIP Servlets 1.1 specification,
    Appendix C.</para>
    <section id="tsdar-DAR-Configuration-File">
      <title>The DAR Configuration File</title>
      <para>The Default Application Router (DAR) obtains its operational parameters from a 
      configuration text file that is modeled as a Java properties file. <!--Issue #814 Editor Comment - So what is the name of the properties file, and what path location does it reside in?-->The configuration file 
      contains the information needed by the Application Router to select
      which SIP Servlet application will handle an incoming initial request.
       </para>
      <para>In the case of &PLATFORM_NAME;
          SIP Servlets, it is also possible to configure the DAR through the
          <filename>server.xml</filename> configuration file (see <xref linkend="bsssc-Configuring_the_Service_Element_in_the_Containers_server.xml"/> and  <xref linkend="wwtssmc-Working_with_the_SIP_Servlets_Management_Console"/>).</para>
      <para>The properties file has the following characteristics and requirements:</para>
      <itemizedlist>
        <listitem>
          <para>It must be made available to the DAR.</para>
        </listitem>
        <listitem>
          <para>It must allow the contents and file structure to be accessible from a hierarchical
          URI supplied as a system property
          <filename>javax.servlet.sip.ar.dar.configuration</filename>.</para>
        </listitem>
        <listitem>
          <para>It is first read by the container when it
          loads up and is refreshed each time an application is
          deployed and undeployed.</para>
        </listitem>
        <listitem>
          <para>It has a simple format in which the name of
          the property is the SIP method and the value is a comma-separated string value for the <literal>SipApplicationRouterInfo</literal>
          object.</para>
          <screen>INVITE: (sip-router-info-1), (sip-router-info-2)..
SUBSCRIBE: (sip-router-info-3), (sip-router-info-4)..
ALL: (sip-router-info-5), (sip-router-info-6)..</screen>
          <para>&PLATFORM_NAME; SIP Servlets defines a new keyword called <literal>ALL</literal>.  The keyword 
        allows mapping between the sip-router-info data, and all methods
        supported by the container (for example, INVITE, REGISTER, SUBSCRIBE). This mapping can 
        save time when configuring an application that listens to all
        incoming methods. </para>
        </listitem>
      </itemizedlist>
      <note>
        <para>If <literal>ALL</literal>, and a specific method are defined in
        the DAR file, the specific method takes precedence over <literal>ALL</literal>. When the specific method no longer has applications to serve, <literal>ALL</literal> is enabled again. </para>
      </note>
      <para>The sip-router-info data specified in the properties file is a
      string value version of the <literal>SipApplicationRouterInfo</literal> object. It consists
      of the following information:</para>
      <itemizedlist>
        <listitem>
          <para>The name of the application as known to the container. The application name can be obtained from the <markup>&lt;app-name&gt;</markup> element of the <filename>sip.xml</filename> deployment
          descriptor of the application, or the <literal>@SipApplication</literal>
          annotation.</para>
        </listitem>
        <listitem>
          <para>The identity of the subscriber that the DAR returns. The DAR can 
          return any header in the SIP request using the DAR directive
          <literal>DAR:SIP_HEADER</literal>.  For example,  <literal>DAR:From</literal> would return the SIP URI in the <literal>From</literal>
          header. The DAR can  alternatively  return any string from the SIP request.</para>
        </listitem>
        <listitem>
          <para>The routing region, which consists of one of the following strings:  <literal>ORIGINATING</literal>,
          <literal>TERMINATING</literal> or <literal>NEUTRAL</literal>.  This information is not currently used
          by the DAR to make routing decisions.</para>
        </listitem>
        <listitem>
          <para>A SIP URI indicating the route as returned by the Application
          Router, which can be used to route the request externally.  The value may be an empty string.</para>
        </listitem>
        <listitem>
          <para>A route modifier, which consists of one of the following strings: <literal>ROUTE</literal>,
          <literal>ROUTE_BACK</literal> or <literal>NO_ROUTE</literal>.  The route modifier is used in conjunction with the 
          route information to route a request externally.</para>
        </listitem>
        <listitem>
          <para>A string representing the order in which  applications must be
          invoked (starts at 0).  The string is removed later on in the routing process,  and substituted with the order positions of sip-router-info data.</para>
        </listitem>
        <listitem>
			<para>
				An optional string that contains &PLATFORM_NAME;-specific parameters. Currently, only the <literal>DIRECTION</literal> and <literal>REGEX</literal> parameters are supported.
			</para>
			<note>
				<para>
					The field can contain unsupported <literal>key=value</literal> properties that may be supported in future releases. The unsupported properties will be ignored during parsing, until support for the attributes is provided.
				</para>
			</note>
			<para>
				The syntax is demonstrated in <xref linkend="example-DAR_Direction_Example"/>.
			</para>
			<itemizedlist>
				<listitem>
					<para>
						The <literal>DIRECTION</literal> parameter specifies whether an application serves external(INBOUND) requests or initiates (OUTBOUND) requests.
					</para>
					<para>
						If an application is marked <literal>DIRECTION=INBOUND</literal>, it will not be called for requests initiated by applications behaving as UAC. To mark an application as UAC, specify <literal>DIRECTION=INBOUND</literal> in the optional parameters in the DAR.
					</para>
					<para>
						Applications that do not exist in the DAR list for the container are assumed to be <literal>OUTBOUND</literal>. Because undefined applications are incapable of serving external requests, they must have self-initiated the request. The Sip Servlets Management Console can be used to specify the <literal>DIRECTION</literal> parameter.
					</para>
				</listitem>
				<listitem>
					<para>
						The <literal>REGEX</literal> parameter specifies a regular expression to be matched against the initial request passed to the Application Router.
					</para>
          			<para>
          				If the regular expression matches a part of the initial request, the application is called. If it does not, it is skipped.
          			</para>
          			<para>
          				For example, in the following sip-router-info data: <screen>INVITE - ("org.mobicents.servlet.sip.testsuite.SimpleApplication", "DAR:From", "ORIGINATING", "", "NO_ROUTE", "0", "REGEX=From:.*sip:.*@sip-servlets\.com")</screen> - only incoming initial requests with a From Header with a SIP URI that belongs to the sip-servlets.com domain will be passed to the SimpleApplication.
           			</para>		
          			</listitem>	
         			</itemizedlist>		
		</listitem>
	</itemizedlist>
      <example id="example-DAR_Direction_Example">
        <title>DIRECTION Example</title>
        <para>In this example, two applications are declared for the
   <literal>INVITE</literal>
   request. The
   <literal>LocationServiceApplication</literal> is called for requests coming from outside the container, but it
   will not be
   called for the requests initiated by the UAC application
   <literal>Click2DialApplication</literal>.    </para>
        <screen>
INVITE: (&quot;org.mobicents.servlet.sip.testsuite.Click2DialApplication&quot;, &quot;DAR:From&quot;,
&quot;ORIGINATING&quot;, &quot;&quot;, &quot;NO_ROUTE&quot;, &quot;0&quot;, &quot;DIRECTION=OUTBOUND&quot;), \
(&quot;org.mobicents.servlet.sip.testsuite.LocationServiceApplication&quot;, &quot;DAR\:From&quot;,
&quot;ORIGINATING&quot;, &quot;&quot;, &quot;NO_ROUTE&quot;, &quot;0&quot;, &quot;DIRECTION=INBOUND&quot;)</screen>
        <para>This type of configuration is useful in cases where different application must be responsible for both requests initiated by the container,  and external requests received by the container.
  </para>
      </example>
      <example>
        <title>ORIGINATING/TERMINATING DAR Example</title>
        <para>In this example, the DAR is configured to invoke two applications on
      receipt of an INVITE request; one each in the originating and the terminating halves. The applications are identified by their application deployment descriptor names.</para>
        <screen>INVITE: (&quot;OriginatingCallWaiting&quot;, &quot;DAR:From&quot;, &quot;ORIGINATING&quot;, &quot;&quot;, &quot;NO_ROUTE&quot;, &quot;0&quot;), (&quot;CallForwarding&quot;, &quot;DAR:To&quot;, &quot;TERMINATING&quot;, &quot;&quot;,&quot;NO_ROUTE&quot;, &quot;1&quot;) </screen>
        <para>For this example, the returned subscriber identity is the URI from each application&apos;s 
      <literal>From</literal> and <literal>To</literal> headers respectively.  The DAR does
      not return any route to the container, and maintains the invocation state
      in the <literal>stateInfo</literal> as the index of the last application in the
      list.</para>
      </example>
    </section>
    <section>
      <title>Routing of SIP Messages to Applications</title>
      <section>
<!--Issue #814 Editor Comment - The info in these sections are nested too deeply.  

To get around this issue, you can create <examples> for each stage of the routing, and include these in the "Routing of SIP Messages to Applications" section.  

Take a look at Example 3.1.2.2.1.1 INVITE Routing to get an idea of how you would structure this.

In "Section 3.1.2.2. Routing of SIP Messages to Applications", put an introductory paragraph about the basic flow (from Invite to Response Routing to Subsequent Requests), then insert each <example> that describes the process in more detail.  

Break each paragraph up into individual steps using <orderedlist> steps, which will increase readability.

Any questions regarding this, give me a yell and we can work through it.-->        <title>Initial Requests and Application Selection Process</title>
        <para>Initial Requests are those that can essentially be dialog
        creating (such as, <literal>INVITE</literal>, <literal>SUBSCRIBE</literal> and  <literal>NOTIFY</literal>),  and not part of an already existing dialog.</para>
        <para>Initial requests are routed to applications deployed in
        the container according to the SIP Servlets 1.1 specification, Section
        15.4.1 Procedure for Routing an Initial Request.</para>
        <note>
          <para>There are
        some other corner cases that apply to initial requests. Refer to Appendix B, Definition of an Initial Request in the SIP Servlets 1.1
        specification. </para>
        </note>
<!--Issue #814 Editor Comment - to show you how to structure an example in a different way, I have taken the time to restructure the original section.  You can put quite a bit of formatting into an Example, not just a code snippet for example.  Check it out.-->        <example>
          <title>INVITE Routing</title>
          <para>The following example describes how the DAR routes an INVITE to two applications  deployed in a container. The applications in this example are a
        Location Service and a Call Blocking application.</para>
          <para>In the example, the assumption of a request coming to the server is described. However, applications can act as a UAC, and  generate initial requests
          on their own. For routing purposes, it is not necessary for 
          the specified application initiating the request to have an  entry in the DAR file.</para>
          <para>The DAR file  contains the required information for the  two
        applications to be invoked in the correct order.</para>
          <para><screen>INVITE: (&quot;LocationService&quot;, &quot;DAR:From&quot;, &quot;ORIGINATING&quot;, &quot;&quot;, &quot;NO_ROUTE&quot;, &quot;0&quot;), (&quot;CallBlocking&quot;, &quot;DAR:To&quot;, &quot;TERMINATING&quot;, &quot;&quot;,&quot;NO_ROUTE&quot;, &quot;1&quot;) </screen></para>
          <para>Processing occurs in the following order:</para>
          <orderedlist>
            <listitem>
              <para>A new <literal>INVITE</literal> (not a re-INVITE) arrives at the container.  </para>
              <para>The <literal>INVITE</literal>  is a  dialog creating request, and is  not part of any
        dialog.</para>
            </listitem>
            <listitem>
              <para>The Application Router is called. </para>
              <para>From the <literal>INVITE</literal> information, the first
        application to invoke is the Location Service. </para>
            </listitem>
            <listitem>
              <para>The Application Router returns  the application invocation order 
        information to the container (along with the rest of the
        sip-router-info data) so  the container knows which application to
        invoke.</para>
            </listitem>
            <listitem>
              <para>The container   invokes the LocationService that proxies the
        <literal>INVITE</literal>. </para>
              <para>The proxied <literal>INVITE</literal> is considered  as a new <literal>INVITE</literal> to the known IP Address of the registered user for the Request
        URI</para>
              <para>For further information regarding <literal>INVITE</literal> handling, refer to  &quot;Section 15.2.2 Sending an Initial Request&quot; in the  SIP
        Servlets 1.1 Specification.</para>
            </listitem>
            <listitem>
              <para>Because the <literal>INVITE</literal> has been proxied, the container  invokes the
        Application Router for the proxied <literal>INVITE</literal> to see if any more
        applications are interested in the event. </para>
            </listitem>
            <listitem>
              <para>From the proxied invite, the Application Router determines that the second application to invoke is the Call Blocking application.
        </para>
            </listitem>
            <listitem>
              <para>The Application Router returns  information regarding the Call Blocking application to the container (along with the
        rest of the sip-router-info data) so  the container knows which
        application to invoke.</para>
            </listitem>
            <listitem>
              <para>The container routes the <literal>INVITE</literal> for the Call Blocking application to the next application in the chain.</para>
            </listitem>
            <listitem>
              <para>The Call Blocking application determines  that the user that initiated the call  is black listed. The application rejects the
        call with a &quot;Forbidden&quot; response. </para>
            </listitem>
            <listitem>
              <para>Because the Call Blocking application acts as a UAS,
        the Application Selection Process is stopped for the original <literal>INVITE</literal>.</para>
            </listitem>
          </orderedlist>
          <para>The path  the <literal>INVITE</literal> has taken (that is, LocationService to 
        CallBlocking) is called the application path.  The routing of the
        responses will now occur as explained in the next section.</para>
        </example>
      </section>
      <section>
        <title>Response Routing</title>
        <para>Responses always follow the reverse of the path taken by the
        corresponding request. In our case, the Forbidden response will first
        go back to the LocationService, and then back to the caller. This is true for
        responses to both initial and subsequent requests. The application
        path is a logical concept and as such may or may not be explicitly
        represented within containers.</para>
        <para>Another possible outcome could have been that the Call Blocking
        application, instead of sending a Forbidden response, allowed the call
        and proxied the INVITE to the same Request URI chosen by the Location
        Service. Then when the callee sends back the 200 OK Response, this
        response goes back the same way through the application path (so in
        the present case Call Blocking, then Location Service, then back to
        the caller).</para>
        <note>
          <para>The Call Blocking application cannot just do nothing with the
          request and expect the container to route the request in its place
          (either to a next application in chain if another one is present or
          to the outside world if none is present). The Application has to do
          something with request (either proxy it or act as a UAS).</para>
        </note>
      </section>
      <section>
        <title>Subsequent Requests</title>
        <para>Subsequent requests are all requests that are not
        Initial.</para>
        <para>The second scenario, where the Call Blocking application allowed
        the call, will be used in this section to showcase subsequent requests.
        The caller has received the 200 OK response back. Now, according to
        the SIP specification (RFC 3261), it sends an ACK. The ACK arrives at
        the container, and is not a dialog creating request and is already part
        of an ongoing dialog (early dialog) so the request is detected as a
        Subsequent request and will follow the application path created by the
        initial request. The ACK will go through Location Service, Call
        Blocking, and finally to the callee.</para>
      </section>
    </section>
  </section>
  <section id="tsdar-Limitations">
    <title>Limitations of the Default Application Router</title>
    <para>The DAR  is a minimalist Application Router implementation that is part of the reference implementation.  While it could be used instead of a production Application Router, it offers no
    processing logic except for  the declaration of the application order. </para>
    <para>In real world deployments, the Application Router plays
    an extremely important role in application orchestration and composition.
    It is likely that the Application Router would  make use of complex rules and diverse data
    repositories in future implementations.</para>
  </section>
</section>
