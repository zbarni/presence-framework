<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "SIP_Servlets_Server_User_Guide.ent">
%BOOK_ENTITIES;
]>
<!-- chapter id nickname: ssfjcs -->
<section id="ssfjcs-SS_for_JBoss-Clustering_Support">
  <title> Understanding &PLATFORM_NAME; High Availabilty </title>

<note>
<title>High Availability in &SHORT_PLATFORM_NAME; for JBoss AS7 </title>
<para>
Clustering and Failover features as described below are not yet implemented in &SHORT_PLATFORM_NAME; for JBoss AS7. This guide will be updated when the feature becomes available.
</para>

</note>



<para> High Availability </para>

<para>
Is a term used to describe software and hardware based strategies that are implemented to ensure optimal performance and continuous system operation in case of failure. High availability encompasses, clustering, failover and load balancing
</para>



<para>  Clustering </para>  
<para>
Is a technique used to ensure continuous service availability by having two or more servers communicate with each other and share configuration and application data (replication) on  fixed, predetermined intervals. This produces two or more application servers with identical setup. There is often a primary server within a clustered cloud from which data is replicated to the secondary. The application servers within a clustered environment will use what is called a heartbeat to ensure that all servers within are alive and functioning. In the case of failure, another server (secondary) will take over the task of responding to client's requests without impacting user experience. In some clustered ecosystem, load balancing is used as explained below.

</para>

<para> Load Balancing</para> 
<para>
This is ultimately about performance. All request from clients  are evenly distributed by the (load balancer) to multiple application servers that are running similar configurations.This type of setup often includes fault tolerance or failover. When one of the nodes, application server instance is not available, all traffic will be directed to the remaining servers. This ensures continuity albeit performance can degrade. Load balancing allows a single point of entry for multiple clients.
</para>


<para> Failover </para>  

<para>
Failover is a way to provide continuous service to clients connecting to an application server in case of system, software or hardware failure. Connections to an unresponsive server is directed (failed over) to a backup server. This is often done within the scope of a clustered configuration aided by a load balancer.
</para>

<para>
It is important to note that clustering is also a way to provide failover and enhance server performance. The same can be said of load balancing. The idea behind all the above mentioned techniques is to provide high availability to connecting clients connecting to applications running on &PLATFORM_NAME;. In a nutshell, high availability englobes all the above mentioned techniques.
</para>

  <!--para>&PLATFORM_NAME; supports the clustering of SIP Servlets-enabled JBoss Application Servers for performance, reliability and failover purposes. Note that only &SHORT_PLATFORM_NAME; for JBoss Servers can be used as cluster nodes; &SHORT_PLATFORM_NAME; for Tomcat Containers are not supported.</para>
  <para>The SIP Servlets Server uses the  JBoss Application Server as its servlet container, and takes advantage of its capabilities, including clustering and failover.  For detailed background information about JBoss Application Server clustering refer to the <ulink url="http://www.jboss.org/file-access/default/members/jbossas/freezone/docs/Clustering_Guide/beta422/html/index.html">JBoss Application Server Clustering Guide</ulink>.</para>
	<section id="ssfjcs-binary-SIP_Servlets_Server_Cluster-Installing_Configuring_and_Running">
    <title>SIP Servlets Server Cluster: Installing, Configuring and Running</title>
    <para>&nbsp;</para>
    <section id="ssfjcs-binary-SIP_Servlets_Server_Cluster-PreInstall_Requirements_and_Prerequisites">
      <title>Pre-Install Requirements and Prerequisites</title>
      <para>&nbsp;</para>
      <variablelist id="ssfjcs-binary-SIP_Servlets_Server_Cluster-Software_Prerequisites">
        <title>Software Prerequisites</title>
        <varlistentry>
          <term>A SIP Servlets-enabled JBoss Application Server</term>
          <listitem>
            <para>Before proceeding, ensure you have correctly configured your JBoss Application Server, according to SIP Servlet Server requirements:</para>
            <itemizedlist>
              <listitem>
                <para>
         <xref linkend="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Installing_Configuring_and_Running"/>
        </para>
              </listitem>
            </itemizedlist>
            <para>The easiest way to set up a cluster of SIP Servlets-enabled JBoss Application Servers is to install, configure and test the binary distribution on one machine, and then  copy the entire installation (directory) to the other machines in the cluster. This is the approach taken in this chapter.</para>
            <para>Install a SIP Servlets Server with JBoss by following the instructions detailed in <xref linkend="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Installing_Configuring_and_Running"/>. </para>
            <para>Afer meeting the requirement you can begin to configure the server  <xref linkend="ssfjcs-binary-SIP_Servlets_Server_Cluster-Configuring"/> below.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
   <section id="ssfjcs-binary-SIP_Servlets_Server_Cluster-Configuring">
      <title>Configuring</title>
      <para>Once installed, the &SHORT_PLATFORM_NAME; for JBoss binary distribution requires only minor configuration in order to enable clustering. </para>
      <para>SIP, and HTTP session state clustering is  pre-configured straight out of the binary distribution. However, to enable session replication in a node, you must tag it as <literal>&lt;distributable/&gt;</literal> both in the <filename>web.xml</filename> and <filename>sip.xml</filename> descriptors. This can be done only individually (per application).</para>
    </section>
    <section id="ssfjcs-binary-SIP_Servlets_Server_Cluster-Running">
      <title>Running</title>
      <para>Clustering with &SHORT_PLATFORM_NAME; for JBoss nodes requires running all of the nodes using the &quot;all&quot; Server Configuration Profile, which is specified when you invoke <command>run.sh</command> or <command>run.bat</command>.</para>
      <formalpara>
        <title>Running &SHORT_PLATFORM_NAME; for JBoss with the &quot;all&quot; Configuration Profile, on Linux</title>
        <para>To run the server on Linux using the &quot;all&quot; Configuration Profile, start the server with the following command:</para>
      </formalpara>
      <screen>&SHORT_PLATFORM_NAME;-jboss-&lt;version&gt;]$ ./bin/run.sh -c all</screen>
      <formalpara>
        <title>Running &SHORT_PLATFORM_NAME; for JBoss with the &quot;all&quot; Configuration Profile, on Windows</title>
        <para>To run the server on Windows using the &quot;all&quot; Configuration Profile, open the Command Prompt, change your folder to the topmost folder of your &SHORT_PLATFORM_NAME; for JBoss installation, and issue the following command:</para>
      </formalpara>
      <screen>C:&bsol;Users&bsol;user\&lt;username&gt;&bsol;My Downloads&bsol;&SHORT_PLATFORM_NAME;-jboss-&lt;version&gt;&gt;bin&bsol;run.bat -c all</screen>
      <formalpara>
        <title>Distributing requests between nodes</title>
        <para>Together with the application server nodes, it is advised to run a SIP load-balancer or an IP load-balancer.  The IP load balancer will distribute the traffic evenly between the nodes. A load-balancer is a single entry-point to all nodes. All calls should be made through the load balancer if  High Availability is required. For more information about load balancing, refer to  <xref linkend="sslb-SIP_Servlets_Load_Balancer-Implementation"/>.</para>
      </formalpara>
      <para>By default, the servers are configured with one SIP load-balancer set to the  IP address <literal>127.0.0.1</literal>. This is specified in the <literal>balancers</literal> attribute in the <filename>server.xml</filename> configuration file as follows:</para>
      <programlisting role="XML">&lt;Service name=&quot;jboss.web&quot; 
      className=&quot;org.mobicents.servlet.sip.startup.failover.SipStandardBalancerNodeService&quot;
  balancers=&quot;127.0.0.1&quot;  
  sipPathName=&quot;org.mobicents.ha&quot;  
  sipApplicationDispatcherClassName=&quot;org.mobicents.servlet.sip.core.SipApplicationDispatcherImpl&quot;
concurrencyControlMode=&quot;None&quot; 
  darConfigurationFileLocation=&quot;conf/dars/mobicents-dar.properties&quot;
  sipStackPropertiesFile=&quot;conf/mss-sip-stack.properties&quot;&gt;
</programlisting>
      <para>Multiple load balancers can be specified and all of them will be updated on the health status of the node. The complete syntax for the balancers string is the following:</para>
      <programlisting role="XML">&lt;Service name=&quot;jboss.web&quot; 
      ...
  balancers=&quot;ipAddress1:sipPort1:rmiPort1;ipAddress2:sipPort2:rmiPort2;..3...4..&quot;  
  ...&gt;
</programlisting>
      <para>If the RMI port is omitted, port 2000 is assumed, and if the SIP port is omitted, 5065 is assumed.</para>
      <warning>
        <para>The SIP port  specified in the balancers string for each balancer refers to the internal SIP port of the SIP balancer. That is because the internal port faces the cluster nodes directly. Requests coming through the internal port will go to the external port and vice versa. If you put the external port in the <literal>balancers</literal> string, then the SIP LB will assume that the requests comes from outside the cluster and it will route it back to some cluster node instead of routing it outside the cluster as expected. Always use the SIP internal port in the <literal>balancers</literal> string. The exception to this rule is when a single port is used for internal and external ports in the SIP load balancer. In that case, the direction analysis is done based on <literal>Via</literal> headers and the requests are routed correctly without extra settings.</para>
        <para/>
      </warning>
      <para>When multiple SIP load balancers are specified, the outgoing requests will always go through the first one, or an IP load balancer can be used and the requests will be distributed based on the IP balancer policy. To route the outgoing requests to a particular IP address (the IP load balancer address for example) the <literal>outboundProxy</literal> property can be used:</para>
      <programlisting role="XML">&lt;Service name=&quot;jboss.web&quot; 
      ...
  balancers=&quot;127.0.0.1:5060:2000;127.0.0.1:5160:2100&quot;  
outboundProxy=&quot;127.0.0.1:5500&quot;
  ...&gt;
</programlisting>
      <para>In this example configuration, all outbound requests will go through 127.0.0.1:5500, while the node will perform the health checks against two SIP load balancers. If the 127.0.0.1:5500 machine is an IP load balancer, it should be configured to spray the  SIP load balancers, and they will route the requests outside the cluster reliably.</para>
      <para>The <literal>outboundProxy</literal> attribute overrides the default effect of specifying a SIP port for SIP load balancers in the <literal>balancers</literal> string.</para>
    </section>
<section id="ssfjcs-binary-SIP_Servlets_Server_Cluster-Stopping">
      <title>Stopping</title>
      <para>Individual nodes in the cluster should be stopped one-by-one, followed by the SIP load balancer. Refer to:</para>
      <itemizedlist>
        <listitem>
          <para>Stopping the SIP load balancer: <xref linkend="sslb-binary-SIP_Load_Balancer-Stopping"/>
     </para>
        </listitem>
        <listitem>
          <para>Stopping &SHORT_PLATFORM_NAME; for JBoss: <xref linkend="bssswjicar-binary-SIP_Servlets_Server_with_JBoss-Stopping"/>
     </para>
        </listitem>
        <listitem>
          <para>Stopping &SHORT_PLATFORM_NAME; for Tomcat: <xref linkend="bssswticar-binary-SIP_Servlets_Server_with_Tomcat-Stopping"/>
     </para>
        </listitem>
      </itemizedlist>
    </section>
    <section id="ssfjcs-binary-SIP_Servlets_Server_Cluster-Testing">
      <title>Testing</title>
      <para>To test your JBoss cluster setup for mid-call failover (Established SIP Dialog), refer to:</para>
      <itemizedlist>
        <listitem>
          <para>
      <xref linkend="ssfjfs-SS_for_JBoss-Failover_Support"/>
     </para>
        </listitem>
      </itemizedlist>
    </section>
    <section id="ssfjcs-binary-SIP_Servlets_Server_Cluster-Uninstalling">
      <title>Uninstalling</title>
      <para>Uninstalling a SIP Servlets Cluster would entail deleting the &PLATFORM_NAME; SIP Servlets Servers directories, the SIP Load Balancer directory, and possibly removing the unused <envar>JBOSS_HOME</envar> environment variable.</para>
    </section>
  </section>
  <section id="ssfjcs-binary-SIP_Servlets_Server_Cluster-SIP-Passivation">
    <title>SIP Sessions Passivation/Activation</title>
    <para>&nbsp;</para>
     <section id="ssfjcs-binary-SIP_Servlets_Server_Cluster-SIP-Passivation-Description">
    <title>Description of SIP Sessions passivation</title>
    <para>
    	Passivation is the process of controlling memory usage by removing relatively unused sessions from memory while storing them in persistent storage. 
    	If a passivated session is requested by a client, it can be "activated" back into memory and removed from the persistent store. 
    	&PLATFORM_NAME; Sip Servlets supports passivation of SipSessions (and by extension SIP Dialogs) and SipApplicationSessions  sipapps whose sip.xml includes the <literal>distributable</literal> tag (i.e. clustered sipapps).
 </para>
 <para>
		Passivation occurs at 2 points during the lifecycle of a sip application:
</para>
 <itemizedlist>
 	<listitem><para>
When the container requests the creation of a new SIP Session or SIP Application Session. 
If the number of currently active session exceeds a configurable limit, an attempt is made to passivate sessions to make room in memory.
</para>
 </listitem>
 <listitem><para>
Periodically (by default, every ten seconds) as the JBoss Web background thread runs.
</para>
 </listitem>
 </itemizedlist>
 <para>
A session will be passivated if one of the following holds true:
</para>
 <itemizedlist>
 	<listitem><para>
The session hasn't been used in greater than a configurable maximum idle time.
</para>
 </listitem>
 <listitem><para>
The number of active sessions exceeds a configurable maximum and the session hasn't been used in greater than a configurable minimum idle time.
</para>
 </listitem>
 </itemizedlist>
 <para> 
In both cases, sessions are passivated on a Least Recently Used (LRU) basis.
    </para>
    </section>
     <section id="ssfjcs-binary-SIP_Servlets_Server_Cluster-SIP-Passivation-Configuration">
		    <title>Configuring Distributable SIP Session Passivation in your SIP Application</title>
		    <para>
		    &nbsp;
		    </para>
		     <section id="ssfjcs-binary-SIP_Servlets_Server_Cluster-SIP-Passivation-Configuration-Step1">
			    <title>Step 1: Add the following to jboss-web.xml for your sip application</title>
			    <para>&nbsp;</para>
			    <programlisting role="XML">
				   &lt;max-active-sessions&gt;20&lt;/max-active-sessions&gt;
				   &lt;passivation-config&gt;
				      &lt;use-session-passivation&gt;true&lt;/use-session-passivation&gt;
				      &lt;passivation-min-idle-time&gt;60&lt;/passivation-min-idle-time&gt;
				      &lt;passivation-max-idle-time&gt;600&lt;/passivation-max-idle-time&gt;
				   &lt;/passivation-config&gt;
				</programlisting>
				<itemizedlist>
				 	<listitem>
				 		<para>
							<literal>max-active-sessions</literal>  Determines the maximum number of active sessions allowed. If the number of sessions managed by the session manager exceeds this value and passivation is enabled, the excess will be passivated based on the configured passivation-min-idle-time. If after passivation is completed (or if passivation is disabled), the number of active sessions still exceeds this limit, attempts to create new sessions will be rejected. If set to -1 (the default), there is no limit.
						</para>
				 	</listitem>
				 	<listitem>
				 		<para>
							<literal>passivation-min-idle-time</literal>  Determines the minimum time (in seconds) that a session must have been inactive before the container will consider passivating it in order to reduce the active session count below max-active-sessions. A value of -1 (the default) disables passivating sessions before passivation-max-idle-time.  Neither a value of -1 nor a high value are recommended if max-active-sessions is set.
						</para>
				 	</listitem>
				 	<listitem>
				 		<para>
							<literal>passivation-max-idle-time</literal> Determines the maximum time (in seconds) that a session can be inactive before the container should attempt to passivate it to save memory. Passivation of such sessions will take place regardless of whether the active session count exceeds max-active-sessions.  Should be less than the sip.xml session-timeout setting. A value of -1 (the default) disables passivation based on maximum inactivity.
						</para>
				 	</listitem>
				 	<listitem>
				 		<para>
							<literal>use-session-passivation</literal>  Determines whether session passivation will be enabled for the web application. Default is false.
						</para>
				 	</listitem>
				 </itemizedlist>
		    </section>
		    <section id="ssfjcs-binary-SIP_Servlets_Server_Cluster-SIP-Passivation-Configuration-Step2">
			    <title>Step 2 : Configure the JBoss Cache cache loader</title>
			    <para>In most cases you don't need to do anything for Step 2; the standard JBoss AS configuration for distributable session caching should suit your needs.  The following is a bit more detail in case you're interested or want to change from the defaults.</para>
			    <para>SIP Session passivation relies on JBoss Cache's Cache Loader passivation for storing and retrieving the passivated sessions. 
			    Therefore the cache instance used by your sipapps clustered session manager must be configured to enable Cache Loader passivaton.
			    
				The Cache Loader configuration for the <literal>standard-session-cache</literal> config is as follows:</para>
			    <programlisting role="XML">
					   &lt;property name=&quot;cacheLoaderConfig&quot;&gt;
			             &lt;bean class=&quot;org.jboss.cache.config.CacheLoaderConfig&quot;&gt;
			                    &lt;!&ndash;&ndash; Do not change these &ndash;&ndash;&gt;
			                    &lt;property name=&quot;passivation&quot;&gt;true &lt;/property&gt;			                   
			                    &lt;property name=&quot;shared&quot;&gt;false &lt;/property&gt;
			                   
			                    &lt;property name=&quot;individualCacheLoaderConfigs&quot;&gt;
			                      &lt;list&gt;
			                         &lt;bean class=&quot;org.jboss.cache.loader.FileCacheLoaderConfig&quot;&gt;
			                            &lt;!&ndash;&ndash; Where passivated sessions are stored &ndash;&ndash;&gt;
			                            &lt;property name=&quot;location&quot;&gt;${jboss.server.data.dir}${/}session &lt;/property&gt;
			                            &lt;!&ndash;&ndash; Do not change these &ndash;&ndash;&gt;
			                            &lt;property name=&quot;async&quot;&gt;false &lt;/property&gt;
			                            &lt;property name=&quot;fetchPersistentState&quot;&gt;true &lt;/property&gt;
			                            &lt;property name=&quot;purgeOnStartup&quot;&gt;true &lt;/property&gt;
			                            &lt;property name=&quot;ignoreModifications&quot;&gt;false &lt;/property&gt;
			                            &lt;property name=&quot;checkCharacterPortability&quot;&gt;false &lt;/property&gt;
			                         &lt;/bean&gt;
			                      &lt;/list&gt;
			                    &lt;/property&gt;
			             &lt;/bean&gt;
			          &lt;/property&gt;
				</programlisting>
				<itemizedlist>
				 	<listitem>
				 		<para>
							<literal>passivation</literal> property MUST be true.
						</para>
				 	</listitem>
				 	<listitem>
				 		<para>
							<literal>shared</literal> property MUST be false. Do not passivate sessions to a shared persistent store, otherwise if another node activates the session, it will be gone from the persistent store and also gone from memory on other nodes that have passivated it. Backup copies will be lost.
						</para>
				 	</listitem>
				 	<listitem>
				 		<para>
							<literal>individualCacheLoaderConfigs</literal> property accepts a list of Cache Loader configurations. JBC allows you to chain cache loaders; see the JBC docs. For the session passivation use case a single cache loader is sufficient.
						</para>
				 	</listitem>
				 	<listitem>
				 		<para>
							<literal>class</literal> attribute on a cache loader config bean MUST refer to the configuration class for a cache loader implementation (e.g. org.jboss.cache.loader.FileCacheLoaderConfig, org.jboss.cache.loader.JDBCCacheLoaderConfig). See the JBoss Cache documentation for more on the available CacheLoader implementations. If you wish to use JDBCCacheLoader (to persist to a database rather than the filesystem used by FileCacheLoader) note the comment above about the shared property.  Don't use a shared database, or at least not a shared table in the database.  Each node in the cluster must have its own storage location.
						</para>
				 	</listitem>
				 	<listitem>
				 		<para>
							<literal>location</literal>  property for FileCacheLoaderConfig defines the root node of the filesystem tree where the passivated session should be stored. The default is to store them in your JBoss AS configuration's data directory.
						</para>
				 	</listitem>
				 	<listitem>
				 		<para>
							<literal>async</literal>  MUST be false to ensure passivated sessions are promptly written to the persistent store.
						</para>
				 	</listitem>
				 	<listitem>
				 		<para>
							<literal>fetchPersistentState</literal>  MUST be true to ensure passivated sessions are included in the set of session backup copies transferred over from other nodes when the cache starts.
						</para>
				 	</listitem>
				 	<listitem>
				 		<para>
							<literal>purgeOnStartup</literal>  should be true to ensure out-of-date session data left over from a previous shutdown of a server doesn't pollute the current data set.
						</para>
				 	</listitem>
				 	<listitem>
				 		<para>
							<literal>ignoreModifications</literal>  should be false.
						</para>
				 	</listitem>
				 	<listitem>
				 		<para>
							<literal>checkCharacterPortability</literal> should be false as a minor performance optimization.
						</para>
				 	</listitem>
				 </itemizedlist>
				 <para>Refer to the JBossCache documentation for further details about Cache Loader configuration.</para>
		    </section>
    </section>
     <section id="ssfjcs-binary-SIP_Servlets_Server_Cluster-SIP-Passivation-Server-Wide-Configuration">
		    <title>Configuring Server-Wide Passivation Defaults</title>
		    <para>
		    The section on jboss-web.xml configuration above described how to configure passivation on a sipapp-by-sipapp basis.
		     If you are deploying several sipapps and each uses the same set of passivation configurations, you may wish to skip the jboss-web.xml configuration and just change the server-wide defaults.  This can be done by uncommenting the following section in the $JBOSS_HOME/server/xxx/deployers/jbossweb.deployer/META-INF/war-deployers-jboss-beans.xml file's WebAppClusteringDefaultsDeployer and setting the values you desire:
		    </para>
		     <programlisting role="XML">
						  &lt;!&ndash;&ndash;
					       &lt;property name=&quot;useSessionPassivation&quot;&gt;false &lt;/property&gt;
					       &lt;property name=&quot;passivationMaxIdleTime&quot;&gt;-1 &lt;/property&gt;
					       &lt;property name=&quot;passivationMinIdleTime&quot;&gt;-1 &lt;/property&gt;
					      &ndash;&ndash;&gt;
				</programlisting>
	</section>
    </section-->
</section>
